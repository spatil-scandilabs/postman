{
  "info": {
    "_postman_id": "3d6105d8-7265-48a1-8bb0-c28cc00b56f1",
    "name": "API2.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "GET Requests",
      "item": [
        {
          "name": "Generate Token",
          "item": [
            {
              "name": "Generate Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"apitoken copied successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c07411c8-99d0-424f-9c2a-d686d86deba0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "apikey",
                      "value": "autopnckey1",
                      "type": "text"
                    },
                    {
                      "key": "apisecret",
                      "value": "autopnckey2",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{URL}}/api/authtoken",
                "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
              },
              "response": []
            }
          ],
          "_postman_id": "96b148dd-b314-4156-b362-794c74fcafbc",
          "_postman_isSubFolder": true
        },
        {
          "name": "1: NPI Type Verification",
          "item": [
            {
              "name": "Type-2 NPI",
              "item": [
                {
                  "name": "Valid Type-2 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3031f657-3e4d-469a-93ea-2852bd0448fd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi}}",
                    "description": "NPI(Type 2)= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Present in application(same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi1\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ef09837d-be4d-4833-b9bd-46d251457020",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi1}}",
                    "description": "NPI(Type 2)= Invalid (present in the application with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Present in application(different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi2\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1c8181b6-be92-4f1c-a0a6-309fed1cd136",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi2}}",
                    "description": "NPI(Type 2)= Invalid (present in the application with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Not present in application and NPPS registry",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi3\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "445eebe5-a0d7-4e72-88f1-161c2a2575ff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi3}}",
                    "description": "NPI(Type 2)= Invalid (Not present in the application and NPPS registry)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type- 2 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi4\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "846bfdc9-000e-442c-9afa-33bf6d7f0a9c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi4}}",
                    "description": "NPI Type 2= Invalid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e5925d37-4d56-4343-8f5e-b9764f4ce951",
              "_postman_isSubFolder": true
            },
            {
              "name": "Type-1 NPI",
              "item": [
                {
                  "name": "Valid Type-1 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi5\"))+\" is a Type ONE NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "979cb380-dc65-4b5e-a393-0830d658b1ab",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "value": "{{auth_id_value}}",
                        "type": "text"
                      },
                      {
                        "key": "auth_token",
                        "value": "{{auth_token_value}}",
                        "type": "text"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi5}}",
                    "description": "NPI(Type 1)= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Present in application(same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi6\"))+\" is a ONE Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7a5599ae-86b2-4695-998a-25f5b12ca426",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi6}}",
                    "description": "NPI(Type 1)= Invalid (present in the application with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Present in application(different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi7\"))+\" is a ONE Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7e1ec376-8215-43e9-b5cf-8f31160c3ab4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi7}}",
                    "description": "NPI(Type 1)= Invalid (present in the application with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Not present in application and NPPS registry",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi8\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "171d58e2-f432-40cc-b059-64d5065010bf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi8}}",
                    "description": "NPI(Type 1)= Invalid (Not present in the application and NPPS registry)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type- 1 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi9\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c8d60534-eaa1-4e9e-9a06-ed0ef3a98896",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi9}}",
                    "description": "NPI= Invalid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "8459bab7-a0a0-401e-83a2-f844759826f2",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "d28d5491-298c-49e4-87e2-9af6860d8edf",
          "_postman_isSubFolder": true
        },
        {
          "name": "2: Partner specific plans",
          "item": [
            {
              "name": "Valid Partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"planId\");",
                      "});",
                      "",
                      "pm.test(\"Legacy Label is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                      "});",
                      "",
                      "pm.test(\"Plan Type is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"type\");",
                      "});",
                      "",
                      "pm.test(\"Unique Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "051f52f7-c851-4dfb-8637-ead105125cc1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/plans",
                "description": "Partner= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner (Different Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "897319fa-0a66-4e22-a8d8-789d97efae45",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/plans",
                "description": "Partner= Invalid (Different Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner (Not exist)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e37bcfa3-8f32-4e83-8a7e-05cf5f421d48",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/plans",
                "description": "Partner= Invalid (Not present in the application)"
              },
              "response": []
            }
          ],
          "_postman_id": "8068d472-dfad-41d3-83d3-8d928ecc673f",
          "_postman_isSubFolder": true
        },
        {
          "name": "3: Partner and Site specific plans",
          "item": [
            {
              "name": "Case1: Valid Partner and different Site combinations",
              "item": [
                {
                  "name": "Valid Partner and Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"planId\");",
                          "});",
                          "",
                          "pm.test(\"Legacy Label is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                          "});",
                          "",
                          "pm.test(\"Plan Type is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"type\");",
                          "});",
                          "",
                          "pm.test(\"Unique Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8b7d92a7-64f3-48f9-b1fe-719a38280d90",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/plans",
                    "description": "Partner= Valid; \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"planId\");",
                          "});",
                          "",
                          "pm.test(\"Legacy Label is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                          "});",
                          "",
                          "pm.test(\"Plan Type is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"type\");",
                          "});",
                          "",
                          "pm.test(\"Unique Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "30c9b2e7-bad5-43b0-ae80-dbf45f2d1854",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4d6fe0e0-5f43-4580-8cd3-e4073cfbe207",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "44722caf-2cb2-48ef-a0ad-9c2716918bc5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c117dce8-c519-4ead-b313-7446923dec16",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "13e422b3-b46a-4341-af06-37b37186725d",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner and valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0ca713ff-42f8-4f66-9527-8ff9de569986",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4ce36b1b-e12f-4bcc-8fad-bb4f5c0bbf42",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1007b2fe-22c5-4d10-a7a7-42d2268788b4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73ab2795-f764-4fcf-a3bd-759806d2f390",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "801bcdbc-8a65-4f84-91e4-227358c9705f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "867db231-8560-4381-821b-7581e2a43949",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a9d56359-236c-4114-84e0-665ea69ce8ca",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9ca9d701-c1fc-46a0-9bdf-6f61b6c4b713",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e2494e8b-963e-4d78-afa8-fa431b77f838",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a8109515-1f2e-4c83-a2d0-271a3a516667",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e2aa3871-6c37-4151-8cb9-a586a7f448c8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "976e9cd5-23ad-4375-a4fb-75a003b31cb4",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "03099bbe-18d2-41e3-b691-ae7839fe7b35",
          "_postman_isSubFolder": true
        },
        {
          "name": "4: Partner specific Sites",
          "item": [
            {
              "name": "Case1: Valid Partner and different Site combinations",
              "item": [
                {
                  "name": "Valid Partner and Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Site \"+(pm.variables.get(\"siteId\"))+\" found successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5d75fe90-cf9a-4361-aea1-38a6c357aa86",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}",
                    "description": "Partner= Valid; \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Site \"+(pm.variables.get(\"siteId1\"))+\" found successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dc1035fb-0096-4929-b9c7-96aa8877fccd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "858b0f89-e006-4ed3-b5d2-af1e87134148",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5759768f-2d75-40d1-a894-0ccaee7f2628",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}",
                    "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dfdc0fc7-1ac0-4459-b603-5b33a75b23f6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}",
                    "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "3a0189c3-183d-461a-a0f0-b4112c7f4890",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner and valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d8327e25-7fa9-4d9c-86f2-e022e6ee9357",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1b6830d1-52e7-482e-8b2a-b41d7ad0dbdf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ee30456c-30a5-4d4d-812b-4c365f162cb1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "18ad8c7c-85cf-4797-b07f-2c74f7c1530e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0a4544ad-079d-4a10-9884-f92b31ce0bbe",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a5c81c44-c712-4c8c-9fb5-77480404915b",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5126c06e-a50c-4241-9444-6cf6a8368471",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3f47165b-2f3d-4839-b859-a88a27cbb446",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2c74ede9-db6e-48bf-af5f-e63a5c9653df",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f1519b24-c018-4237-b42d-647376363f56",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e4af635b-fbed-438d-99c7-f38b2112813f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "67d1c284-66a4-47f5-9243-de7084558f74",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "948fddfd-47ed-4dec-8213-654869236f53",
          "_postman_isSubFolder": true
        },
        {
          "name": "5: Partner specific enrollments modified between the date range",
          "item": [
            {
              "name": "Case1: Valid Partner and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found between the date range \"+(pm.variables.get(\"fromDate\"))+ \" and \"+(pm.variables.get(\"toDate\"))+\" successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "pm.test(\"The returned enrollment requests modified date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);",
                          "    var jsonResponce = JSON.parse(responseBody);",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");",
                          "",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);",
                          "            ",
                          "            var foundValidMilestone = false;",
                          "            for(var k = 0; k < enrollmentRequest.milestones.length; k++){",
                          "                var milestone = enrollmentRequest.milestones[k];",
                          "                var createdDateString = milestone.createdDate;",
                          "                var createdDate = new Date(createdDateString.split(\"T\")[0]);",
                          "                console.log(\"************* createdDate: \" + createdDate + \" *** fromDate: \" + fromDate + \" **** toDate: \" + toDate);",
                          "",
                          "                if(createdDate >= fromDate && createdDate <= toDate){",
                          "                    foundValidMilestone = true;",
                          "                    break;",
                          "                }",
                          "            }",
                          "            ",
                          "            pm.expect(foundValidMilestone).to.be.true;",
                          "        }",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4e08085d-65b4-4efe-9ca5-696bd8ce2c78",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "59026932-018b-4d3e-b7fd-654d3d5d0c44",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ee80689b-1c2f-417d-b664-53d093ed6725",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f192ec56-5649-40fc-98af-0d8a845ce079",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "abddfb7f-4458-4f35-8d0c-bcaf57d866e1",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73773688-0066-405a-ae0b-66c531b1297c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "35afc46e-b348-40c7-921c-bce4edbf1e19",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "79f00f66-8736-4494-8320-b0c329ce72db",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6cce91dd-f41c-4c36-849f-d4e0f8b84523",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e46ea9db-8ac6-42a0-b310-52041ced4a6a",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a793f408-ad44-4e59-9152-85a5b0a4bc5a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "946bf707-9309-48cc-ab28-d1879f9b1c3a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5be13ae6-d32d-4a0f-997e-28544733e6e4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dfaefdfd-d815-4f9a-adcc-f0299c8e2247",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "68341b3d-c4e1-4e2a-858d-cacfca1701c5",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "8298aebd-9ee1-4433-afda-584affaa0704",
          "_postman_isSubFolder": true
        },
        {
          "name": "6: Partner specific enrollments created between the date range",
          "item": [
            {
              "name": "Case1: Valid Partner and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3ebddba4-d7c1-461b-bb4a-82be17b1fde1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/from/{{fromDate}}/to/{{toDate}}/enrollmentstatus",
                    "description": "Partner= Valid; \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4faf1213-66c2-40b1-9158-330b7cbcaa84",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2fbd3913-18ed-4f69-a875-37436adccf97",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "464cb98f-ff1b-49f7-984e-f40900d65a9f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7dc62651-be2d-4adc-86ee-6a07317b9d7d",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "af82bfb0-685d-4728-ba60-6e2e452a91ee",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0a7ba6f0-0684-49c5-aa59-2c0c5c610a1a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "30097685-e68e-4aec-bd2d-8fc5e689c51c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "fda7e674-13ba-405e-b099-aa1b462352b1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "2e006813-be1c-4a2c-8d81-5e2bd9092b22",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bb7e3ee0-472e-49ac-9f3f-d29f0fb6782d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "865e20a8-f82c-4871-9dc4-bb51f4056514",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b6a9b634-43e4-4317-80bd-b84f565e59bb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c85af747-8cfc-45c9-80cc-cf397d9a8ca2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "72c19ce0-7362-4830-8d0b-83d386c60442",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "efe6f5e3-f2be-4112-90e9-4417acbae133",
          "_postman_isSubFolder": true
        },
        {
          "name": "7: Partner and Site specific enrollments created between the date range",
          "item": [
            {
              "name": "Case1: Valid Data",
              "item": [
                {
                  "name": "Valid Partner, Site and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0fdaf356-c7d9-48fb-893f-e934e5b76498",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7268bc6c-7b65-4780-8590-92d531210767",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Valid Partner, Site and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner, Site and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73296fc0-1c69-480c-88be-d603d57bf044",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cc64aa31-2fbc-4a54-a854-db917e33f3ff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0f835e81-84a7-4799-812c-41e1387fb57a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "802be3b1-e443-4761-ab4c-bdfbecf8770f",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Valid Partner, Date range and invalid Site",
              "item": [
                {
                  "name": "Valid Partner, Date range and invalid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ed2d9eae-f987-4ce4-b776-9a6abf8608cf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid; \nSite= Invalid (Different Site with same Partner);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Date range and invalid Site with different partner",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "74ed1e87-739c-4689-a3ba-10995145ce40",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid; \nSite= Invalid (Different Site with different Partner);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Date range and invalid Site which is not present",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "647882a1-6f2d-45f6-92db-77c054fbbe3f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid; \nSite= Invalid (Site not present in the application);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Date range and invalid Site (Wrong site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "799b323d-b313-4ddc-9b65-63e4c92e1ca0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid; \nSite= Invalid (Wrong Site Id);"
                  },
                  "response": []
                }
              ],
              "_postman_id": "3b6cf40d-3131-4895-b8b4-e514cbcd85f3",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case4: Valid Site, Date range and invalid Partner",
              "item": [
                {
                  "name": "Valid Site, Date range and invalid Partner",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "296f10c9-b516-479f-b04f-27696c28e614",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Site= Valid; \nDate range= Valid; \nPartner= Invalid (Different Partner);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site, Date range and invalid Partner not present",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1375b6a2-d755-4d35-88bf-7870d270d92d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Site= Valid; \nDate range= Valid; \nPartner= Invalid (Not present in the application);"
                  },
                  "response": []
                }
              ],
              "_postman_id": "1b077d84-8afc-4d39-b75d-c484ec5d014b",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case5: Valid Partner and invalid Site, Date Range",
              "item": [
                {
                  "name": "Valid Partner and Site of different partner, invalid Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d2180905-451d-45b7-b143-be9aee366098",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner) \nDate Range= Invalid;"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Site of different partner, wrong Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "436703f7-49ff-42ee-8ddf-e0eb885271be",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner) \nDate Range= Invalid (Wrong date range);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Site of different partner, swapping Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1c61d3c3-67a4-4a88-b315-cd8a1125594d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner) \nDate Range= Invalid (Swapping date range);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site, Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6926b75d-065f-4cd9-8d2e-7a05d20fa4e0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Invalid; \nDate Range= Invalid (Date range not present in the application);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site, wrong Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9f223479-6cfa-4972-b15f-93ab3f0d09b9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Invalid; \nDate Range= Invalid (Wrong date range);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site, swaping Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d4577410-ae35-4a2a-a144-c2ef1975b602",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Invalid; \nDate Range= Invalid (Swapping date range);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site which is not present, invalid Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e0cc32f6-5054-4bce-bbfb-7fdfe4cdbabf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Invalid (Not present); \nDate Range= Invalid;"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site which is not present, wrong Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "31c170a7-0473-4dc3-af49-9040ed86be25",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Invalid (Not present); \nDate Range= Invalid (Wrong Date range);"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and invalid Site which is not present, swapping Date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8aad1259-4581-40e8-96c1-bae0fb7a7bf8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Invalid (Not present); \nDate Range= Invalid (Swapping Date range);"
                  },
                  "response": []
                }
              ],
              "_postman_id": "b26b4401-dbd5-4836-94ae-180cbf36b80c",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case6: Valid Date Range and invalid Partner, Site",
              "item": [
                {
                  "name": "Valid Date Range and invalid Partner (other partner) and Site (same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5562d31b-ef6f-4259-87c8-d06a80332078",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Different Partner)\nSite= Invalid (Invalid with same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (other partner) and Site (different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c105f3ce-9233-431c-8a65-6312c5ca885b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Different Partner)\nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (other partner) and Site (different partner) Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9f2349fe-f865-4dbf-a913-6ce5d2697aa3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Different Partner)\nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (other partner) and Site (wrong data)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "22949bdd-e193-4697-9feb-a1eb5de9c317",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Different Partner)\nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (not present in the application) and Site (same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "251102f2-bbaf-4035-92d4-7e843d20a05f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Not present in the application)\nSite= Invalid (Same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (not present in the application) and Site (different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9a7292c4-b519-4390-879d-fbbbeae4bd6e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Not present in the application)\nSite= Invalid (different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (not present in the application) and Site (not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3af0ffbe-6feb-40b2-a649-5d6139e93edf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Not present in the application)\nSite= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Date Range and invalid Partner (not present in the application) and Site (wrong data)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "aa6a09da-40bf-4c77-9689-36ed96e7ce6f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId4}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Date Range= Valid; \nPartner= Invalid (Not present in the application)\nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a4cc8256-10bf-4bd4-aae2-ef0821b87765",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case7: Valid Site and invalid Partner, Date range",
              "item": [
                {
                  "name": "Valid Site and invalid Partner (other partner) and Date Range (Invalid)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1b37ba8c-3f58-4749-95b2-cae36e6aafa3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Site= Valid; \nPartner= Invalid (Different Partner)\nDate Range= Invalid (Invalid range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site and invalid Partner (other partner) and Date Range (wrong data range)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d0954a01-b0ca-49cd-9da8-c3813e577fea",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Site= Valid; \nPartner= Invalid (Different Partner)\nDate Range= Invalid (Wrong Date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site and invalid Partner (other partner) and Date Range (swapping data range)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6fcce7b4-1023-488a-a779-ac8fb0f07551",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Site= Valid; \nPartner= Invalid (Different Partner)\nDate Range= Invalid (Swapping Date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site and invalid Partner (not present in the application) and Date Range (invalid data range)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "02becc21-12d7-46ca-b6f9-2a4cecf56da6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Site= Valid; \nPartner= Invalid (Not present in the application)\nDate Range= Invalid (invalid Date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site and invalid Partner (not present in the application) and Date Range (wrong data range)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e4a3af8a-2bdf-4f4d-aa71-4f9fa3eec6b9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Site= Valid; \nPartner= Invalid (Not present in the application)\nDate Range= Invalid (Wrong Date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Site and invalid Partner (not present in the application) and Date Range (swapping data range)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7624e7c2-b785-4841-a211-6df6a926f778",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Site= Valid; \nPartner= Invalid (Not present in the application)\nDate Range= Invalid (Swapping Date range)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "b2061a28-0419-4861-8a28-db5e2a81140c",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case8: Invalid Partner, Site and Date range",
              "item": [
                {
                  "name": "Invalid Partner, Site(same partner) and Date Range (invalid dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8caa8f65-3029-4c17-9f2b-3c516bd2d478",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Same Partner);\nDate Range= Invalid (Invalid dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(same partner) and Date Range (wrong dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d6a49f4a-0877-4d5f-bc9b-412f6925fb4b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Same Partner);\nDate Range= Invalid (Wrong dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(same partner) and Date Range (swapping dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d0ff4c2a-fc6e-4db4-bb74-c79e577d3063",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Same Partner);\nDate Range= Invalid (Swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site and Date Range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b0b46d7d-85c4-4f6d-93ac-fbdf2bf1e802",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Different Partner)\nDate Range= Invalid (Invalid range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site and Date Range (Wrong format)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4133857f-f8c5-460d-a10d-f7a0f1c9b982",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Different Partner)\nDate Range= Invalid (Wrong format range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site and Date Range (Swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e0210554-e0de-45ec-948c-c483a2533880",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Different Partner)\nDate Range= Invalid (Swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(Not present) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e256c249-7ee4-4531-aaca-c6ed743bfd5d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Not present)\nDate Range= Invalid (Invalid dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(Not present) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "26ca3cbf-c2c8-4718-9020-e93e71a13650",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Not present)\nDate Range= Invalid (Wrong dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(Not present) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "04a4f62d-21d7-43fc-8ebe-fedad3ac2502",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Not present)\nDate Range= Invalid (Swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(wrong) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "65ee2f5a-1e92-44e3-b57e-32310c18096c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Wrong)\nDate Range= Invalid (invalid dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(wrong) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "08f61dab-4a3a-4ac1-8f90-645347669a12",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Wrong)\nDate Range= Invalid (wrong dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner, Site(wrong) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "efbc8488-b8a0-4882-9994-59b0e0ba59b4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid (Wrong)\nDate Range= Invalid (swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(same partner) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "caa0b5cc-a164-4238-96ab-e9f5fb4de06d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Same partner)\nDate Range= Invalid (invalid dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(same partner) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "87c12208-8fa1-4182-99f5-eb0adfdb127c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Same partner)\nDate Range= Invalid (wrong dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(same partner) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "19625bf7-63de-4c98-81d7-aa871c92a031",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Same partner)\nDate Range= Invalid (Swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(different partner) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f3428efe-e0e3-4010-8b9a-dc736a3fffa6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Different partner)\nDate Range= Invalid (Invalid dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(different partner) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d7d57dbd-6020-400f-b741-2a7fbebc86cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Different partner)\nDate Range= Invalid (Wrong dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(different partner) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "155dc562-b134-45ac-a326-0676cd320296",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Different partner)\nDate Range= Invalid (Swapping dates)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(not present) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4af71931-b3c5-44ec-8e9b-9b2bbc04af9e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Not present in the application)\nDate Range= Invalid (invalid date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(not present) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "19df8db1-8990-4c99-b0c5-a54375e4ca4a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Not present in the application)\nDate Range= Invalid (Wrong date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(not present) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bd927d25-9f0a-402d-b826-d4c7dc3ae046",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Not present in the application)\nDate Range= Invalid (Swapping date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(wrong site id) and Date Range (invalid Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "106281f2-bf53-4278-9fdb-14c119b6af03",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId4}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Wrong site id)\nDate Range= Invalid (Invalid date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(wrong site id) and Date Range (wrong Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a476bb98-9fba-4f04-bef4-c1b77e2853de",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId4}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Wrong site id)\nDate Range= Invalid (Wrong date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(not present), Site(wrong site id) and Date Range (swapping Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d8d3a066-6a01-4dd0-9af1-9353482f9e69",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId4}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid (Not present in the application); \nSite= Invalid (Wrong site id)\nDate Range= Invalid (Swapping date range)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "b7fe73cf-cfee-4fc9-954a-945fc8a59085",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "3ae7ddad-42c2-4eb6-a2f4-66fd3f329208",
          "_postman_isSubFolder": true
        },
        {
          "name": "8. Type 2 specific enrollments",
          "item": [
            {
              "name": "Case1: Valid data",
              "item": [
                {
                  "name": "Type 2 specific enrollments with valid data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found successfully for type 1 NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Enrollments found for type 2 practice location NPI \"+ (pm.variables.get(\"npi\")) +\" of TIN \"+ (pm.variables.get(\"taxId\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3cc169a2-3304-4077-ab0c-3e7c18ad47d3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid; \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e64f51fb-7966-4bb0-bc79-4c2c1fa5631d",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Invalid Partner",
              "item": [
                {
                  "name": "Type 2 specific enrollments with invalid data(Different Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4d573fdf-0452-4fa7-b800-6d951331ede9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Invalid (different partner);\nSite Id= Valid; \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid data(Partner not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c52fb2f6-34ce-439c-a803-55e1797a823e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Invalid (not present in the application);\nSite Id= Valid; \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "469814af-e993-4d6d-9e4c-aa0a4d4263e2",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Invalid Site",
              "item": [
                {
                  "name": "Type 2 specific enrollments with invalid Site(use different site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "27088d32-2ee8-4f3a-b316-602c9fe06277",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different site id of same partner); \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid Site(different partner's site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "acebe40b-e8ae-4cad-a59c-e8408291019c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different partner's site id); \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid Site(Site id not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "40a82da5-2d2f-4c33-a8ea-36e4841ff1e5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Site not present); \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid Site(Wrong site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "777c7237-33c1-49b4-a589-998e4836c8f0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Wrong site id); \nTIN= Valid; \nType 2 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "c98e7568-ff0e-4172-a701-a553f3c35ce0",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case4: Invalid TIN",
              "item": [
                {
                  "name": "Type 2 specific enrollments with invalid TIN(different tin with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Practice location not exist\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI MISSING: NPI not availbale\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location does not exist: \"+ (pm.variables.get(\"npi\")));",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e23141d4-f511-4a2c-a409-7b7ee26b2b8e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId1}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different TIN with same partner); \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid TIN(different partner's tin)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f63c61e9-f2c8-4e53-9b54-96948c71620d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId2}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different partner's TIN); \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid TIN(not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e46ff1da-b29c-496d-a029-b7a59fe2bff8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId3}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(not present in the application); \nType 2 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid TIN(wrong TIN)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "504d7333-10ca-43e4-a974-dfe6964aa87f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId4}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(Wrong TIN); \nType 2 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a1d8b794-e577-46a7-a05d-8a626bb4ebb5",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case5: Invalid Type 2 NPI",
              "item": [
                {
                  "name": "Type 2 specific enrollments with invalid type 2 NPI(different NPI with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found successfully for type 1 NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Enrollments found for type 2 practice location NPI \"+ (pm.variables.get(\"npi1\")) +\" of TIN \"+ (pm.variables.get(\"taxId\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "835457b7-e62f-486c-b6bc-e1523727a48d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi1}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nType 2 NPI= Invalid (different NPI with same partner);"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid type 2 NPI(different partner's NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Practice location not exist\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI MISSING: NPI not availbale\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location does not exist: \"+ (pm.variables.get(\"npi2\")));",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d1ab8150-ccc7-4a5c-a0b2-bb5a6e666671",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi2}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nType 2 NPI= Invalid (different partner's NPI)"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid type 2 NPI(NPI not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Practice location not exist\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI MISSING: NPI not availbale\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location does not exist: \"+ (pm.variables.get(\"npi3\")));",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b8196cde-e8ef-4e23-b6a9-d0302b8f2f54",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi3}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nType 2 NPI= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Type 2 specific enrollments with invalid type 2 NPI(wrong NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Wrong NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI INVALID: NPI should be valid\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Invalid NPI. Must be 10 digits or Extended npi\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0dbe8b46-02c9-41f2-8566-9e52209274cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi4}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nType 2 NPI= Invalid (Wrong NPI)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "9f7f48dd-4796-4f13-9bdf-617edb4a4775",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "6e80f14e-f0a6-4d9f-9da2-02a3d9835b5d",
          "_postman_isSubFolder": true
        },
        {
          "name": "9. Type 1 specific enrollments",
          "item": [
            {
              "name": "Case1: Valid data",
              "item": [
                {
                  "name": "Type 1 specific enrollments with valid data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found successfully for type 1 NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Enrollments found for type 1 NPI \"+ (pm.variables.get(\"npi5\")) + \" and practice location \"+ (pm.variables.get(\"npi\"))+ \" of TIN \"+ (pm.variables.get(\"taxId\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e47bcb70-197e-4021-92a2-b8119c891278",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "value": "{{auth_id_value}}",
                        "type": "text"
                      },
                      {
                        "key": "auth_token",
                        "value": "{{auth_token_value}}",
                        "type": "text"
                      },
                      {
                        "key": "tin",
                        "value": "{{taxId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments?limit=10&offset=21",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "api",
                        "v2.0",
                        "partners",
                        "{{partnerShortName}}",
                        "sites",
                        "{{siteId}}",
                        "medical-groups",
                        "masked-tin-in-header",
                        "practices",
                        "{{npi}}",
                        "providers",
                        "{{npi5}}",
                        "enrollments"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "10"
                        },
                        {
                          "key": "offset",
                          "value": "21"
                        }
                      ]
                    },
                    "description": "Partner= Valid;\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "6863d78e-44a6-4f21-a0a1-158cf7d89419",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Invalid Partner",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid data(Different Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "68623271-857f-44ec-8e31-a99165e58199",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Invalid (different partner);\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid data(Partner not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e95c3637-afa0-4d5d-b5b9-98a4cd6fa9c8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Invalid (not present in the application);\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7c64d81c-3247-4bdd-aa48-3ace36e98173",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Invalid Site",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid Site(use different site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "18bd8445-510a-4c53-9173-73d1ae29a3e7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different site id of same partner); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(different partner's site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f34714b5-0699-4351-80a3-10c2b4c36527",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different partner's site id); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(Site id not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6d7b7da1-0c51-493d-ba7e-3aee26c1cb70",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Site not present); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(Wrong site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2a04b1d0-45b9-4429-a3dc-d587b5d3e1b5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Wrong site id); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "de232e37-27a1-4d50-8ef3-a853a566ac3b",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case4: Invalid TIN",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid TIN(different tin with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4eccdc64-6862-4128-a921-59b0c7f9f8fe",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId1}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different TIN with same partner); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(different partner's tin)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f3de1bf4-6ead-486f-8160-8623e25dd2d3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId2}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different partner's TIN); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8044f860-c7e7-4e85-8adc-600e52516dff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId3}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(not present in the application); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(wrong TIN)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0254266d-120a-4713-90b3-1b7f6dd1ed58",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId4}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(Wrong TIN); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "3239a546-440b-40e4-8851-f4e445204474",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case5: Invalid Type 2 NPI",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(different NPI with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "33a3176d-cca4-4395-9b98-2c779a0dc8bc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi1}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (different NPI with same partner); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(different partner's NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2b409b40-aee8-4f2f-aad2-ab4d6a4000cb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi2}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (different partner's NPI); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(NPI not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ca6d80ee-b419-4efa-929f-752445cbac39",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi3}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (Not present in the application); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(wrong NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Wrong NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI INVALID: NPI should be valid\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Invalid NPI. Must be 10 digits or Extended npi\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d0be2eac-7529-4e27-b787-ab0fa13a6cdd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi4}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (Wrong NPI); \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "2b443fec-e993-43a2-9181-ae3cd53d031a",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case6: Invalid Type 1 NPI",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(different NPI with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "62cfc49b-d1db-471e-8ce4-9e7bdc81b579",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi6}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(differnet NPI with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(different NPI with different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f4c87dc4-ab50-42d0-a77a-e07ae5aa0c20",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi7}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(differnet NPI with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(NPI not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not found to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"NPI MISSING\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider not found for NPI: 1975429873\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4b5a7c8e-66ff-4f93-8826-5c146163704e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi8}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(wrong NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Wrong NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI INVALID: NPI should be valid\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Invalid or missing NPI. Must be 10 digits, no spaces or dashes.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c069cefa-6f4d-4cfa-b302-572b1491f4da",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi9}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(Wrong NPI)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7b36ab86-ddab-40f2-84de-1cc8c3712e27",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "5ea26287-c4b1-4774-9ae2-10341b1bb014",
          "_postman_isSubFolder": true
        },
        {
          "name": "11. Type 1 specific enrollment request",
          "item": [
            {
              "name": "Case1: Valid data",
              "item": [
                {
                  "name": "Type 1 specific enrollments with valid data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found successfully for type 1 NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Enrollments found for type 1 NPI \"+ (pm.variables.get(\"npi5\")) + \" and practice location \"+ (pm.variables.get(\"npi\"))+ \" of TIN \"+ (pm.variables.get(\"taxId\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c071a66a-b8ba-41c4-8dd1-84e1fc537c80",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "value": "{{auth_id_value}}",
                        "type": "text"
                      },
                      {
                        "key": "auth_token",
                        "value": "{{auth_token_value}}",
                        "type": "text"
                      },
                      {
                        "key": "tin",
                        "value": "{{taxId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments?limit=10&offset=21",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "api",
                        "v2.0",
                        "partners",
                        "{{partnerShortName}}",
                        "sites",
                        "{{siteId}}",
                        "medical-groups",
                        "masked-tin-in-header",
                        "practices",
                        "{{npi}}",
                        "providers",
                        "{{npi5}}",
                        "enrollments"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "10"
                        },
                        {
                          "key": "offset",
                          "value": "21"
                        }
                      ]
                    },
                    "description": "Partner= Valid;\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "67e7d735-5a8d-4ee1-a76b-acb007a9f715",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Invalid Partner",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid data(Different Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "039efb86-f5f9-45ce-8eec-ad56da16758d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Invalid (different partner);\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid data(Partner not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bb833a5f-9149-47ce-aa46-782eecff69d9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Invalid (not present in the application);\nSite Id= Valid; \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "f17451e8-90ed-4e51-b9fa-cd9ca18dd55c",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Invalid Site",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid Site(use different site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6e09b53c-ff9b-4f10-b730-0fce3899c5f5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different site id of same partner); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(different partner's site id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bc60e5f0-4e31-4dfa-8664-84bfbeed053d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (different partner's site id); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(Site id not present)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d6c0aa52-e1ed-411e-836a-780ef34c1639",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Site not present); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid Site(Wrong site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "69c6fa66-e539-4363-9547-34dab4260175",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Invalid (Wrong site id); \nTIN= Valid; \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a486df0b-a555-467a-a26b-297dd8609c5c",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case4: Invalid TIN",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid TIN(different tin with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c22dfe95-fe0b-4939-93ea-921a47d41c76",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId1}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different TIN with same partner); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(different partner's tin)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "426004b4-b315-42d3-8225-eee826860939",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId2}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(different partner's TIN); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "746afff0-d544-4d4d-8d14-32f2c5dc0ae8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId3}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(not present in the application); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid TIN(wrong TIN)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Medical Group not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"MEDICAL GROUP MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Medical Group tax id (tin) not found.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1c91495e-5607-423d-bafb-e75469bef84c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId4}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Invalid(Wrong TIN); \nNPI=  Valid; \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "186d3389-ae93-410d-94cf-3b785a05fd90",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case5: Invalid Type 2 NPI",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(different NPI with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8fc3fe6d-0d84-427b-9823-b902b061243e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi1}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (different NPI with same partner); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(different partner's NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6fec7585-9f6a-43f1-b143-9604a5fd96cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi2}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (different partner's NPI); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(NPI not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Practice location not linked to Medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PRACTICE NOT UNDER MEDICAL GROUP\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Practice Location (npi) exists but is not linked to the given Medical Group.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2339674d-0836-4286-83cb-fd81e581549f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi3}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (Not present in the application); \nType 1 NPI= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 2 NPI(wrong NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Wrong NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI INVALID: NPI should be valid\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Invalid NPI. Must be 10 digits or Extended npi\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "94f4485a-b9fa-4d7d-9953-c5e1b0139cdc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi4}}/providers/{{npi5}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Invalid (Wrong NPI); \nType 1 NPI= Valid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a6b45d00-9049-4706-baf2-643a1a486de0",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case6: Invalid Type 1 NPI",
              "item": [
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(different NPI with same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6e2f86b7-d0e6-402a-8008-232e60023a66",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi6}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(differnet NPI with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(different NPI with different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not linked to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"PROVIDER NOT UNDER PRACTICE\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider exists but is not linked to the given Practice.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5c141186-fe8d-4d24-b7d4-19953a8acee0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi7}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(differnet NPI with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(NPI not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Provider not found to given medical group\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "",
                          "pm.test(\"NPI MISSING\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Provider not found for NPI: 1975429873\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "27db36af-4c40-41f2-8006-52444458a741",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi8}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Type 1 specific enrollments with invalid type 1 NPI(wrong NPI)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "456e890b-f28c-4ff1-bcfe-2a0f5132ad7f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Wrong NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"NPI INVALID: NPI should be valid\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Invalid or missing NPI. Must be 10 digits, no spaces or dashes.\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9b9db7a1-37de-46b9-be25-89f6ea79fca4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      },
                      {
                        "key": "tin",
                        "type": "text",
                        "value": "{{taxId}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{npi9}}/enrollments",
                    "description": "Partner= Valid;\nSite Id= Valid;\nTIN= Valid; \nNPI= Valid;\nType 1 NPI= Invalid(Wrong NPI)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "677d445f-9a99-4b97-bfbd-4def0df4749b",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "5ee399e3-600a-480a-b89f-76e58ceab1e5",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "69d0f880-59f4-43ba-b3fa-002229db4e2d"
    },
    {
      "name": "POST Requests",
      "item": [
        {
          "name": "Generate Token",
          "item": [
            {
              "name": "Generate Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"apitoken copied successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "34a52ab8-7ba1-4b23-9017-84d7493d1558",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "apikey",
                      "value": "autopnckey1",
                      "type": "text"
                    },
                    {
                      "key": "apisecret",
                      "value": "autopnckey2",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{URL}}/api/authtoken",
                "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
              },
              "response": []
            }
          ],
          "_postman_id": "cf39c589-9bf5-49b9-9f47-c9bc5972ce31",
          "_postman_isSubFolder": true
        },
        {
          "name": "POST: Partner enrollment statuses",
          "item": [
            {
              "name": "enrollment status for valid partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f011a21-6148-43df-83dd-0d0a5da98d20",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ea1c4b33-8377-403e-bfa9-03f0f5a5a6f8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"createdFrom\": \"2019-12-01T00:00:00\",\n  \"createdTo\": \"2020-01-01T00:00:00\",\n  \"customPayerId\": \"0TPNC1\",\n  \"medicalGroupTIN\": 137000,\n  \"modifiedFrom\": \"2019-12-01T00:00:00\",\n  \"modifiedTo\": \"2020-01-01T00:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"partnerAdminShortName\": \"PNC\",\n  \"payerName\": \"Test Payer\",\n  \"practiceLocationNPI\": 1649240540,\n  \"startIndex\": 0,\n  \"transactionTypes\": [\n    \"CSI\",\n    \"ERA\",\n    \"EDI\",\n    \"EFT\",\n    \"ELIGIBILITY\"\n  ]\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/status",
                "description": "List enrollments of TRIZETTO partner"
              },
              "response": []
            },
            {
              "name": "Enrollment status for other partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67de08ec-7d5c-4cdc-a41d-9ac24f28d592",
                    "exec": [
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(412);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"JSON ELEMENT INVALID: Response should have proper message\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 412\", function () {",
                      "    pm.response.to.have.status(412);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "55f5846f-d4a4-4ee1-aa05-1d08f622a98e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"TRIZETTO\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/status",
                "description": "Expecting test fail: listing enrollment status for other valid partner"
              },
              "response": []
            }
          ],
          "_postman_id": "2ed921fe-c35b-47aa-9d94-8317dddbc745",
          "_postman_isSubFolder": true
        },
        {
          "name": "POST: Site enrollment status",
          "item": [
            {
              "name": "Enrollment statuses: Valid partner and Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5d4b3746-e5a6-4bf1-ab18-cb8e9658f4cf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status",
                "description": "Return the enrollment statuses for the valid partner as well as valid site"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: Valid partner and Site Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c031490c-43ff-4e08-aa86-8d4e38059a1a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Aetna\",\n  \"customPayerId\": \"TESTAET1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 20207,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}\n\n"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status",
                "description": "Return the enrollment statuses for the valid partner as well as valid site"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: valid partner and invalid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const expectedMessage = \"1 failure condition: URI parameter siteId does not match with siteId in JSON\";",
                      "const expectedReponseCode = 412;",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}",
                      "",
                      ""
                    ],
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b657d56e-7f7f-453d-9d8a-d5776a0cfb3d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCInvalidSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: invalid partner and valid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "const expectedMessage = \"1 failure condition: URI parameter partnerShortName does not match with partnerShortName in JSON\";",
                      "const expectedReponseCode = 412;",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"Response should have proper message for invalid site\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "46c13eb7-83f4-4ad1-a0d4-0bc3fa502483",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"TRIZETTO\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: invalid partner and invalid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "const expectedReponseCode = 412;",
                      "const expectedMessage = \"1 failure condition: URI parameter partnerShortName does not match with partnerShortName in JSON\";",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"Response should have proper message for invalid site\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "57cd5e37-32f4-4207-a31f-2f3d52d46bd5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"invalidPNC\",\n  \"siteId\": \"PNCInvalidSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            }
          ],
          "_postman_id": "09d11bae-0192-405c-92e9-5528f697602f",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "3a769003-1f0c-4ca8-9614-cc9fb6517a40"
    },
    {
      "name": "PUT Requests",
      "item": [
        {
          "name": "Generate Token",
          "item": [
            {
              "name": "Generate Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"apitoken copied successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dade71c0-425e-4464-8cbd-4106289da76a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "apikey",
                      "value": "autopnckey1",
                      "type": "text"
                    },
                    {
                      "key": "apisecret",
                      "value": "autopnckey2",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{URL}}/api/authtoken",
                "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
              },
              "response": []
            }
          ],
          "_postman_id": "8650b55a-630b-495b-b88f-f86e0756d3e8",
          "_postman_isSubFolder": true
        },
        {
          "name": "PUT: Partners site",
          "item": [
            {
              "name": "Partners site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1e57fb0-a221-44ef-9723-deade8c40267",
                    "exec": [
                      "const expectedReponseCode = 200;",
                      "const putVerificationTokenMessage = \"1 failure condition:  Put verification token not found in header\";",
                      "var isFailedDueToPutVerificationToken = false;",
                      "",
                      "pm.test(\"Response should contains success\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.not.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode == 404 && message == putVerificationTokenMessage){",
                      "    tests[\"Failed because of missing put verification token\"] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e7971a12-a2b3-4ce0-9b19-ca4eef7da6ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"PNC Test Site\",\n  \"siteId\": \"PNCSiteId\"\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}"
              },
              "response": []
            }
          ],
          "_postman_id": "90c8bc89-293f-498f-823f-ba2c1cfe1f31",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "3e40ca66-d11c-44b0-8de2-1393fddb0cbf"
    },
    {
      "name": "OG-Stories",
      "item": [
        {
          "name": "TOG-84: Legacy Id changes",
          "item": [
            {
              "name": "Add Legacy Ids: Type 2 NPI",
              "item": [
                {
                  "name": "Add Legacy Id",
                  "item": [
                    {
                      "name": "Generate Token",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                            "exec": [
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"apitoken copied successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "58364606-509c-4aee-aded-84def331ba96",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "apikey",
                              "value": "autopnckey1",
                              "type": "text"
                            },
                            {
                              "key": "apisecret",
                              "value": "autopnckey2",
                              "type": "text"
                            }
                          ]
                        },
                        "url": "{{URL}}/api/authtoken",
                        "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
                      },
                      "response": []
                    },
                    {
                      "name": "Get the plan detail",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "a64b3fc5-c7eb-4a8b-87e1-4afdf386180a",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add the legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids added successfully to the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "8a144aed-702a-46b4-8bdf-587b5ea09b71",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n      \"Id1\",\n      \"Id2\",\n      \"Id3\"\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for legacy Ids",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "12830979-ab0a-463d-85a4-5d9c3762e5fc",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add/remove no legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids removed successfully to the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "23d75d07-4732-444f-b871-0e3742a49925",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for no legacy Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "9574bbb9-e2c3-49a8-be73-2e7fd591e743",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add blank legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids added successfully from the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "342298f7-b8ba-4788-96e3-467d726e3812",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    \t\"LegacyId1\",\n    \t\"LegacyId2\",\n    \t\"LegacyId3\",\n    \t\"LegacyId4\",\n    \t\"LegacyId5\"\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for multiple legacy ids",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "d897de5f-03e9-43f4-9a13-750ce50c880c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId7}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add legacy Ids to the plans where Payer legacy label to set to None",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids not added to the plan\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "3517cf34-7959-4e6a-97df-420afa365d2d",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    \t\"LegacyId1\",\n    \t\"LegacyId2\",\n    \t\"LegacyId3\",\n    \t\"LegacyId4\",\n    \t\"LegacyId5\"\n    ],\n    \"uniquePlanId\": \"dd5a970d-a96d-46df-80a9-7e4dbe466c31\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/plans/{{uniquePlanId7}}"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "29548449-09d0-4067-9264-e3929f43e721",
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Create Enrollments",
                  "item": [
                    {
                      "name": "Create single Enrollment for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "d4f41bd2-a452-4a95-a28c-4da0b665f7e0",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Enrollment creates successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"FULL_SERVICE\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "5aef045e-c966-4614-a685-ce503a767e6c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          },
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \"LegacyId1\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"ERA\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create multiple Enrollment for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "637262a6-610a-4ed2-8832-cdecf2b8c81a",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "77578063-e4fd-4b71-a7c9-8951f4d792b4",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \"LegacyId1\",\n        \"LegacyId2\",\n        \"LegacyId3\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"ERA\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment without Legacy Ids for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9ce639fc-7676-479f-a60b-88fff6082c5f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Enrollment creates successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"FULL_SERVICE\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "7150ac0a-41af-4a39-89ec-72250e7f81ef",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"CSI\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment wrong Legacy Id for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "57644a44-1825-45ab-bb34-aabc7c91c657",
                            "exec": [
                              "pm.test(\"Status code is 400\", function () {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"INVALID LEGACY ID: Legacy Id value is wrong\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"Invalid legacy ID. Please pass a legacy ID associated with the NPI.\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "e15ba6c3-c92f-45ad-b331-b35df24e6c2f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n      \t\"TEST123\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"EDI\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment plan for which Legacy label not set",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "57644a44-1825-45ab-bb34-aabc7c91c657",
                            "exec": [
                              "pm.test(\"Status code is 400\", function () {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"INVALID LEGACY ID: Legacy Id value is wrong\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"Enrollment Request contains Legacy Id. But Plan with custom payer id 0TPNC4 and payer name\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "403eece0-5f06-4754-bd28-27c358412873",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n      \t\"TEST123\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"EDI\"\n      ],\n      \"uniquePlanId\": \"dd5a970d-a96d-46df-80a9-7e4dbe466c31\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/enrollmentrequests"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "b186a159-24a0-4fae-8057-de57e6d177c9",
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_id": "a2daad2c-2cd2-4d25-95ca-867ed5e591b1",
              "_postman_isSubFolder": true
            },
            {
              "name": "Add Legacy Ids: Type 1 NPI",
              "item": [
                {
                  "name": "Add Legacy Id",
                  "item": [
                    {
                      "name": "Generate Token",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                            "exec": [
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                              "",
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"apitoken copied successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "704965f9-7a9b-4d8d-9cd3-64987c81bb78",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "apikey",
                              "value": "autopnckey1",
                              "type": "text"
                            },
                            {
                              "key": "apisecret",
                              "value": "autopnckey2",
                              "type": "text"
                            }
                          ]
                        },
                        "url": "{{URL}}/api/authtoken",
                        "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
                      },
                      "response": []
                    },
                    {
                      "name": "Get the plan detail",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "52439f2c-cf27-4665-b78a-86e5dbbbfb76",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add the legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids added successfully to the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "71475eae-805b-464b-8ccf-8ca8453c65c0",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n      \"Id1\",\n      \"Id2\",\n      \"Id3\"\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for legacy Ids",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "b5c94db0-46aa-4a2b-863a-908ae65591bf",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add/remove no legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids removed successfully to the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "356f5109-40ba-4053-9586-3757d3cf81a4",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for no legacy Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "9dddc601-7745-40be-84a1-37a89820d3b1",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add blank legacy Ids to the plans",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids added successfully from the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "6532e667-189d-4986-b75b-3daf68f3540e",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    \t\"LegacyId1\",\n    \t\"LegacyId2\",\n    \t\"LegacyId3\",\n    \t\"LegacyId4\",\n    \t\"LegacyId5\"\n    ],\n    \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Get the updated plan details for multiple legacy ids",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test((pm.variables.get(\"uniquePlanId\")) + \" Plan found in the responce\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              "var jsonData = JSON.parse(responseBody);",
                              "postman.setEnvironmentVariable(\"putVerificationToken\", jsonData.putVerificationToken);",
                              "",
                              "pm.test(\"Token coppied\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"putVerificationToken\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "29988768-4a7d-41a7-9903-18252947385b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          }
                        ],
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId7}}"
                      },
                      "response": []
                    },
                    {
                      "name": "Add legacy Ids to the plans where Payer legacy label to set to None",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "678a0da2-91aa-46be-9928-cfd17fe52e0f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Legacy Ids added successfully from the Medical Group\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"true\");",
                              "});",
                              "",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "84b676b2-c043-444b-b24c-de420146c3e6",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          },
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"bankInformation\": {\n    \"currentBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678901234,\n      \"accountType\": \"CHECKING\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    },\n    \"previousBankProfile\": {\n      \"accountDocumentationType\": \"BANK_LETTER\",\n      \"accountNumber\": 12345678905678,\n      \"accountType\": \"SAVINGS\",\n      \"address\": {\n        \"city\": \"City\",\n        \"phone\": \"999-999-9999\",\n        \"state\": \"AL\",\n        \"street1\": \"Street1\",\n        \"street2\": \"Street2\",\n        \"zip\": 12345,\n        \"zipExtension\": 1234\n      },\n      \"bankName\": \"Test Bank\",\n      \"routingNumber\": 123456789\n    }\n  },\n  \"enrollmentUnit\": \"GROUP\",\n  \"formContact\": {\n    \"person\": {\n      \"email\": \"test12@test.com\",\n      \"fax\": \"999-999-9999\",\n      \"firstName\": \"FirstName\",\n      \"gender\": \"UNKNOWN\",\n      \"jobTitle\": \"Manager\",\n      \"lastName\": \"LastName\",\n      \"middleName\": \"MiddleName\",\n      \"nameTitlePrefix\": \"nameTitlePrefix\",\n      \"nameTitleSuffix\": \"nameTitleSuffix\",\n      \"phone\": \"999-999-9999\"\n    }\n  },\n  \"plan\": {\n    \"legacyId\": [\n    \t\"LegacyId1\",\n    \t\"LegacyId2\",\n    \t\"LegacyId3\",\n    \t\"LegacyId4\",\n    \t\"LegacyId5\"\n    ],\n    \"uniquePlanId\": \"dd5a970d-a96d-46df-80a9-7e4dbe466c31\"\n  }\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/plans/{{uniquePlanId7}}"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "3cde716e-a687-48e1-b69d-1a6ebf2092d3",
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Create Enrollments",
                  "item": [
                    {
                      "name": "Create single Enrollment for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "d4f41bd2-a452-4a95-a28c-4da0b665f7e0",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Enrollment creates successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"FULL_SERVICE\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "5496c52a-89b8-479b-8157-1a170b1f6084",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          },
                          {
                            "key": "auth_id",
                            "value": "{{auth_id_value}}",
                            "type": "text"
                          },
                          {
                            "key": "auth_token",
                            "value": "{{auth_token_value}}",
                            "type": "text"
                          },
                          {
                            "key": "tin",
                            "value": "{{taxId}}",
                            "type": "text"
                          },
                          {
                            "key": "put-verification-token",
                            "value": "{{putVerificationToken}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \"LegacyId1\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"ERA\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create multiple Enrollment for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "637262a6-610a-4ed2-8832-cdecf2b8c81a",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "7fb02465-f382-439f-931e-68bbc31f8f04",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \"LegacyId1\",\n        \"LegacyId2\",\n        \"LegacyId3\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"ERA\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment without Legacy Ids for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9ce639fc-7676-479f-a60b-88fff6082c5f",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {",
                              "    pm.response.to.have.status(200);",
                              "});",
                              "",
                              "pm.test(\"Enrollment creates successfully\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"FULL_SERVICE\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "5dfb6173-11b0-4620-9cd9-27d64ef89f26",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"CSI\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment wrong Legacy Id for Type 2 NPI",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "57644a44-1825-45ab-bb34-aabc7c91c657",
                            "exec": [
                              "pm.test(\"Status code is 400\", function () {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"INVALID LEGACY ID: Legacy Id value is wrong\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"Invalid legacy ID. Please pass a legacy ID associated with the NPI.\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "f3441716-baac-4634-a1ab-45bfe88f638b",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n      \t\"TEST123\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"EDI\"\n      ],\n      \"uniquePlanId\": \"PNCTP_PROFESSIONAL\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/enrollmentrequests"
                      },
                      "response": []
                    },
                    {
                      "name": "Create Enrollment plan for which Legacy label not set",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "57644a44-1825-45ab-bb34-aabc7c91c657",
                            "exec": [
                              "pm.test(\"Status code is 400\", function () {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"INVALID LEGACY ID: Legacy Id value is wrong\", function () {",
                              "    pm.expect(pm.response.text()).to.include(\"Enrollment Request contains Legacy Id. But Plan with custom payer id 0TPNC4 and payer name\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "c93ae9a7-c4fe-4fe2-9867-cf77fffa1362",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "name": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          },
                          {
                            "key": "auth_id",
                            "type": "text",
                            "value": "{{auth_id_value}}"
                          },
                          {
                            "key": "auth_token",
                            "type": "text",
                            "value": "{{auth_token_value}}"
                          },
                          {
                            "key": "tin",
                            "type": "text",
                            "value": "{{taxId}}"
                          },
                          {
                            "key": "put-verification-token",
                            "type": "text",
                            "value": "{{putVerificationToken}}"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"enrollmentRequests\": [\n    {\n      \"legacyId\": [\n      \t\"TEST123\"\n        \n      ],\n      \"registrationId\": \"\",\n      \"transactionTypesToEnroll\": [\n        \"EDI\"\n      ],\n      \"uniquePlanId\": \"dd5a970d-a96d-46df-80a9-7e4dbe466c31\"\n    }\n  ]\n}"
                        },
                        "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/medical-groups/masked-tin-in-header/practices/{{npi}}/providers/{{individualNpi}}/enrollmentrequests"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "e7b617d9-4c8e-47d2-98b4-2ba9badbe7e5",
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_id": "22873c2d-316e-494e-ad1a-038a0a344081",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "ba0aad0a-5a66-4c44-bc91-c385eef44567",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "8e32b707-aaba-4ccc-9d56-06b9eed0d297"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "65741959-64b0-4d23-b71d-0ec31ed116fa",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "da0e49dd-2179-47eb-a4ae-895c6b2cfbf3",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "088a21a6-9999-44bb-b0a4-e5ee0ab33f73",
      "key": "npi",
      "value": "1649240540",
      "type": "string"
    },
    {
      "id": "0bdcf670-9961-491b-a8dd-8c15f7184dec",
      "key": "npi1",
      "value": "1073819710",
      "type": "string"
    },
    {
      "id": "9d56ae2d-d543-48db-84c4-814db458945f",
      "key": "npi2",
      "value": "1063828648",
      "type": "string"
    },
    {
      "id": "a7ccd944-5c3c-4f11-8496-cab6c9886921",
      "key": "npi3",
      "value": "4319737249",
      "type": "string"
    },
    {
      "id": "86c2c160-8a37-47ed-9853-b2b0f6283c30",
      "key": "npi4",
      "value": "bnmeufku8",
      "type": "string"
    },
    {
      "id": "7ea914ed-9168-425e-9bb4-70442c82aaba",
      "key": "npi5",
      "value": "1518016351",
      "type": "string"
    },
    {
      "id": "65ce9253-93d1-47cb-923d-744973371e14",
      "key": "npi6",
      "value": "1114903994",
      "type": "string"
    },
    {
      "id": "5e741fc6-8d6c-45c2-830d-e304d8a834af",
      "key": "npi7",
      "value": "1376655704",
      "type": "string"
    },
    {
      "id": "85b9008a-c92f-4ed2-b97c-03ea2e7b89f6",
      "key": "npi8",
      "value": "1975429873",
      "type": "string"
    },
    {
      "id": "3c4cc99b-92cb-4a69-89ca-503bfe6c5bab",
      "key": "npi9",
      "value": "wft51234u",
      "type": "string"
    },
    {
      "id": "2c9a4b8f-ab0f-454e-9898-9a1b7d50b246",
      "key": "partnerShortName",
      "value": "PNC",
      "type": "string"
    },
    {
      "id": "ad5663a3-3289-4a8c-becd-c6fbd8e42674",
      "key": "partnerShortName2",
      "value": "TRIZETTO",
      "type": "string"
    },
    {
      "id": "01419924-13f1-4a4d-90f2-027f07a5ca73",
      "key": "partnerShortName3",
      "value": "TESTPARTNER",
      "type": "string"
    },
    {
      "id": "3281c7e9-802b-4fa5-8d74-88b384e26089",
      "key": "siteId",
      "value": "PNCSiteId",
      "type": "string"
    },
    {
      "id": "259263e2-a7a8-4b1c-b9f9-551eb1a74ba1",
      "key": "siteId1",
      "value": "jaredpnc",
      "type": "string"
    },
    {
      "id": "45503643-0b20-44a6-85a5-3b8d086a15e7",
      "key": "siteId2",
      "value": "api13id",
      "type": "string"
    },
    {
      "id": "940dcea3-ebcf-4d87-8088-ca16d6022c14",
      "key": "siteId3",
      "value": "1234abcd",
      "type": "string"
    },
    {
      "id": "0482569e-8bd4-4e9e-9aa5-f6f88643cbff",
      "key": "siteId4",
      "value": "fsdf asfas sadfasd",
      "type": "string"
    },
    {
      "id": "84be0b6d-53c0-45e1-bd74-74ac6a8e4d72",
      "key": "fromDate",
      "value": "2019-06-01T00:00:00",
      "type": "string"
    },
    {
      "id": "6f8c5e40-8fe2-4308-9f90-ca55cacb35d3",
      "key": "fromDate3",
      "value": "1987-06-01T00:00:00",
      "type": "string"
    },
    {
      "id": "7edc077e-c42e-4508-b778-05543dcb91a5",
      "key": "fromDate4",
      "value": "3563536354",
      "type": "string"
    },
    {
      "id": "f331d3c3-d673-4534-8f7f-be3233150eaa",
      "key": "toDate",
      "value": "2019-06-30T00:00:00",
      "type": "string"
    },
    {
      "id": "9b929322-a0c9-48c5-b248-5a43f1a5feb9",
      "key": "toDate3",
      "value": "1987-06-30T00:00:00",
      "type": "string"
    },
    {
      "id": "6637874b-5afd-4380-a588-825c2d5277dc",
      "key": "toDate4",
      "value": "99847334",
      "type": "string"
    },
    {
      "id": "0439b35e-c79d-411f-9768-f6b8f3025775",
      "key": "uniquePlanId",
      "value": "PNCTP_PROFESSIONAL",
      "type": "string"
    },
    {
      "id": "b2cf47e0-b742-4382-9265-a33647f7c4df",
      "key": "individualNpi",
      "value": "1518016351",
      "type": "string"
    },
    {
      "id": "72d84057-2cc2-4651-9556-452dccfeb82c",
      "key": "uniquePlanId7",
      "value": "dd5a970d-a96d-46df-80a9-7e4dbe466c31",
      "type": "string"
    },
    {
      "id": "6390abe1-2573-4b92-a05a-cb90e9db89b1",
      "key": "taxId",
      "value": "000137000",
      "type": "string"
    },
    {
      "id": "5133fe99-3702-432b-8b5b-02fdcdd7bbae",
      "key": "taxId1",
      "value": "153153000",
      "type": "string"
    },
    {
      "id": "54e934fa-3754-4c63-a28b-3ffb71630561",
      "key": "taxId2",
      "value": "153000153",
      "type": "string"
    },
    {
      "id": "dd1e5a0f-ec35-448d-a470-7728ec0d6523",
      "key": "taxId3",
      "value": "736354836",
      "type": "string"
    },
    {
      "id": "04bfc3bb-0835-4b1d-ba87-ab4b98060b35",
      "key": "taxId4",
      "value": "562jdt875",
      "type": "string"
    }
  ]
}