{
  "info": {
    "_postman_id": "3d6105d8-7265-48a1-8bb0-c28cc00b56f1",
    "name": "API2.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "GET Requests",
      "item": [
        {
          "name": "Generate Token",
          "item": [
            {
              "name": "Generate Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"apitoken copied successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c07411c8-99d0-424f-9c2a-d686d86deba0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "apikey",
                      "value": "autopnckey1",
                      "type": "text"
                    },
                    {
                      "key": "apisecret",
                      "value": "autopnckey2",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{URL}}/api/authtoken",
                "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
              },
              "response": []
            }
          ],
          "_postman_id": "96b148dd-b314-4156-b362-794c74fcafbc",
          "_postman_isSubFolder": true
        },
        {
          "name": "1: NPI Type Verification",
          "item": [
            {
              "name": "Type-2 NPI",
              "item": [
                {
                  "name": "Valid Type-2 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3031f657-3e4d-469a-93ea-2852bd0448fd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi}}",
                    "description": "NPI(Type 2)= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Present in application(same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi1\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ef09837d-be4d-4833-b9bd-46d251457020",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi1}}",
                    "description": "NPI(Type 2)= Invalid (present in the application with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Present in application(different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi2\"))+\" is a Type TWO NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1c8181b6-be92-4f1c-a0a6-309fed1cd136",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi2}}",
                    "description": "NPI(Type 2)= Invalid (present in the application with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-2 NPI: Not present in application and NPPS registry",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi3\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "445eebe5-a0d7-4e72-88f1-161c2a2575ff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi3}}",
                    "description": "NPI(Type 2)= Invalid (Not present in the application and NPPS registry)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type- 2 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi4\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "846bfdc9-000e-442c-9afa-33bf6d7f0a9c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi4}}",
                    "description": "NPI Type 2= Invalid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e5925d37-4d56-4343-8f5e-b9764f4ce951",
              "_postman_isSubFolder": true
            },
            {
              "name": "Type-1 NPI",
              "item": [
                {
                  "name": "Valid Type-1 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi5\"))+\" is a Type ONE NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "979cb380-dc65-4b5e-a393-0830d658b1ab",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "value": "{{auth_id_value}}",
                        "type": "text"
                      },
                      {
                        "key": "auth_token",
                        "value": "{{auth_token_value}}",
                        "type": "text"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi5}}",
                    "description": "NPI(Type 1)= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Present in application(same partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi6\"))+\" is a ONE Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7a5599ae-86b2-4695-998a-25f5b12ca426",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi6}}",
                    "description": "NPI(Type 1)= Invalid (present in the application with same partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Present in application(different partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi7\"))+\" is a ONE Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7e1ec376-8215-43e9-b5cf-8f31160c3ab4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi7}}",
                    "description": "NPI(Type 1)= Invalid (present in the application with different partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type-1 NPI: Not present in application and NPPS registry",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi8\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "171d58e2-f432-40cc-b059-64d5065010bf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi8}}",
                    "description": "NPI(Type 1)= Invalid (Not present in the application and NPPS registry)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Type- 1 NPI",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"The given NPI \"+(pm.variables.get(\"npi9\"))+\" is a UNKNOWN Type NPI\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c8d60534-eaa1-4e9e-9a06-ed0ef3a98896",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/npitype/{{npi9}}",
                    "description": "NPI= Invalid"
                  },
                  "response": []
                }
              ],
              "_postman_id": "8459bab7-a0a0-401e-83a2-f844759826f2",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "d28d5491-298c-49e4-87e2-9af6860d8edf",
          "_postman_isSubFolder": true
        },
        {
          "name": "2: Partner specific plans",
          "item": [
            {
              "name": "Valid Partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"planId\");",
                      "});",
                      "",
                      "pm.test(\"Legacy Label is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                      "});",
                      "",
                      "pm.test(\"Plan Type is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"type\");",
                      "});",
                      "",
                      "pm.test(\"Unique Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "051f52f7-c851-4dfb-8637-ead105125cc1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/plans",
                "description": "Partner= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner (Different Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "897319fa-0a66-4e22-a8d8-789d97efae45",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/plans",
                "description": "Partner= Invalid (Different Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner (Not exist)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e37bcfa3-8f32-4e83-8a7e-05cf5f421d48",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/plans",
                "description": "Partner= Invalid (Not present in the application)"
              },
              "response": []
            }
          ],
          "_postman_id": "8068d472-dfad-41d3-83d3-8d928ecc673f",
          "_postman_isSubFolder": true
        },
        {
          "name": "3: Partner and Site specific plans",
          "item": [
            {
              "name": "Case1: Valid Partner and different Site combinations",
              "item": [
                {
                  "name": "Valid Partner and Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"planId\");",
                          "});",
                          "",
                          "pm.test(\"Legacy Label is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                          "});",
                          "",
                          "pm.test(\"Plan Type is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"type\");",
                          "});",
                          "",
                          "pm.test(\"Unique Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8b7d92a7-64f3-48f9-b1fe-719a38280d90",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/plans",
                    "description": "Partner= Valid; \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"planId\");",
                          "});",
                          "",
                          "pm.test(\"Legacy Label is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                          "});",
                          "",
                          "pm.test(\"Plan Type is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"type\");",
                          "});",
                          "",
                          "pm.test(\"Unique Plan Id is present\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "30c9b2e7-bad5-43b0-ae80-dbf45f2d1854",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4d6fe0e0-5f43-4580-8cd3-e4073cfbe207",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "44722caf-2cb2-48ef-a0ad-9c2716918bc5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c117dce8-c519-4ead-b313-7446923dec16",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/plans",
                    "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "13e422b3-b46a-4341-af06-37b37186725d",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner and valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0ca713ff-42f8-4f66-9527-8ff9de569986",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4ce36b1b-e12f-4bcc-8fad-bb4f5c0bbf42",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1007b2fe-22c5-4d10-a7a7-42d2268788b4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73ab2795-f764-4fcf-a3bd-759806d2f390",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "801bcdbc-8a65-4f84-91e4-227358c9705f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/plans",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "867db231-8560-4381-821b-7581e2a43949",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a9d56359-236c-4114-84e0-665ea69ce8ca",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9ca9d701-c1fc-46a0-9bdf-6f61b6c4b713",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e2494e8b-963e-4d78-afa8-fa431b77f838",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a8109515-1f2e-4c83-a2d0-271a3a516667",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e2aa3871-6c37-4151-8cb9-a586a7f448c8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "976e9cd5-23ad-4375-a4fb-75a003b31cb4",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "03099bbe-18d2-41e3-b691-ae7839fe7b35",
          "_postman_isSubFolder": true
        },
        {
          "name": "4: Partner specific Sites",
          "item": [
            {
              "name": "Case1: Valid Partner and different Site combinations",
              "item": [
                {
                  "name": "Valid Partner and Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Site \"+(pm.variables.get(\"siteId\"))+\" found successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5d75fe90-cf9a-4361-aea1-38a6c357aa86",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}",
                    "description": "Partner= Valid; \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Site \"+(pm.variables.get(\"siteId1\"))+\" found successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dc1035fb-0096-4929-b9c7-96aa8877fccd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "858b0f89-e006-4ed3-b5d2-af1e87134148",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}",
                    "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5759768f-2d75-40d1-a894-0ccaee7f2628",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}",
                    "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid Site (Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Site not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dfdc0fc7-1ac0-4459-b603-5b33a75b23f6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}",
                    "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "3a0189c3-183d-461a-a0f0-b4112c7f4890",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner and valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d8327e25-7fa9-4d9c-86f2-e022e6ee9357",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1b6830d1-52e7-482e-8b2a-b41d7ad0dbdf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ee30456c-30a5-4d4d-812b-4c365f162cb1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "18ad8c7c-85cf-4797-b07f-2c74f7c1530e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0a4544ad-079d-4a10-9884-f92b31ce0bbe",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}",
                    "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "a5c81c44-c712-4c8c-9fb5-77480404915b",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different Site combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5126c06e-a50c-4241-9444-6cf6a8368471",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3f47165b-2f3d-4839-b859-a88a27cbb446",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2c74ede9-db6e-48bf-af5f-e63a5c9653df",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f1519b24-c018-4237-b42d-647376363f56",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e4af635b-fbed-438d-99c7-f38b2112813f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                    "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "67d1c284-66a4-47f5-9243-de7084558f74",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "948fddfd-47ed-4dec-8213-654869236f53",
          "_postman_isSubFolder": true
        },
        {
          "name": "5: Partner specific enrollments modified between the date range",
          "item": [
            {
              "name": "Case1: Valid Partner and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Enrollments found between the date range \"+(pm.variables.get(\"fromDate\"))+ \" and \"+(pm.variables.get(\"toDate\"))+\" successfully\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});",
                          "",
                          "pm.test(\"The returned enrollment requests modified date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);",
                          "    var jsonResponce = JSON.parse(responseBody);",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");",
                          "",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);",
                          "            ",
                          "            var foundValidMilestone = false;",
                          "            for(var k = 0; k < enrollmentRequest.milestones.length; k++){",
                          "                var milestone = enrollmentRequest.milestones[k];",
                          "                var createdDateString = milestone.createdDate;",
                          "                var createdDate = new Date(createdDateString.split(\"T\")[0]);",
                          "                console.log(\"************* createdDate: \" + createdDate + \" *** fromDate: \" + fromDate + \" **** toDate: \" + toDate);",
                          "",
                          "                if(createdDate >= fromDate && createdDate <= toDate){",
                          "                    foundValidMilestone = true;",
                          "                    break;",
                          "                }",
                          "            }",
                          "            ",
                          "            pm.expect(foundValidMilestone).to.be.true;",
                          "        }",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4e08085d-65b4-4efe-9ca5-696bd8ce2c78",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "59026932-018b-4d3e-b7fd-654d3d5d0c44",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ee80689b-1c2f-417d-b664-53d093ed6725",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f192ec56-5649-40fc-98af-0d8a845ce079",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "abddfb7f-4458-4f35-8d0c-bcaf57d866e1",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73773688-0066-405a-ae0b-66c531b1297c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "35afc46e-b348-40c7-921c-bce4edbf1e19",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "79f00f66-8736-4494-8320-b0c329ce72db",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6cce91dd-f41c-4c36-849f-d4e0f8b84523",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e46ea9db-8ac6-42a0-b310-52041ced4a6a",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a793f408-ad44-4e59-9152-85a5b0a4bc5a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "946bf707-9309-48cc-ab28-d1879f9b1c3a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5be13ae6-d32d-4a0f-997e-28544733e6e4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dfaefdfd-d815-4f9a-adcc-f0299c8e2247",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "68341b3d-c4e1-4e2a-858d-cacfca1701c5",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "8298aebd-9ee1-4433-afda-584affaa0704",
          "_postman_isSubFolder": true
        },
        {
          "name": "6: Partner specific enrollments created between the date range",
          "item": [
            {
              "name": "Case1: Valid Partner and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3ebddba4-d7c1-461b-bb4a-82be17b1fde1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/from/{{fromDate}}/to/{{toDate}}/enrollmentstatus",
                    "description": "Partner= Valid; \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4faf1213-66c2-40b1-9158-330b7cbcaa84",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2fbd3913-18ed-4f69-a875-37436adccf97",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "464cb98f-ff1b-49f7-984e-f40900d65a9f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7dc62651-be2d-4adc-86ee-6a07317b9d7d",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Different Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "af82bfb0-685d-4728-ba60-6e2e452a91ee",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0a7ba6f0-0684-49c5-aa59-2c0c5c610a1a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "30097685-e68e-4aec-bd2d-8fc5e689c51c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "fda7e674-13ba-405e-b099-aa1b462352b1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Different Partner); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "2e006813-be1c-4a2c-8d81-5e2bd9092b22",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Case3: Wrong Partner and different date range combinations",
              "item": [
                {
                  "name": "Invalid Partner(Not present) and Valid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bb7e3ee0-472e-49ac-9f3f-d29f0fb6782d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "865e20a8-f82c-4871-9dc4-bb51f4056514",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b6a9b634-43e4-4317-80bd-b84f565e59bb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Invalid Partner(Not present) and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Partner not found\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});",
                          "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c85af747-8cfc-45c9-80cc-cf397d9a8ca2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/enrollments/modified/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Invalid(Not present in the application); \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "72c19ce0-7362-4830-8d0b-83d386c60442",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9583cc10-58fe-45de-94c6-c6853e37ce6a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bb1584b8-27a4-4786-b04d-c96e3a4cfd22",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "efe6f5e3-f2be-4112-90e9-4417acbae133",
          "_postman_isSubFolder": true
        },
        {
          "name": "7: Partner and Site specific enrollments created between the date range",
          "item": [
            {
              "name": "Case1: Valid Partner, Site and different date range combinations",
              "item": [
                {
                  "name": "Valid Partner, Site and date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0fdaf356-c7d9-48fb-893f-e934e5b76498",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "73296fc0-1c69-480c-88be-d603d57bf044",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cc64aa31-2fbc-4a54-a854-db917e33f3ff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0f835e81-84a7-4799-812c-41e1387fb57a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "802be3b1-e443-4761-ab4c-bdfbecf8770f",
              "_postman_isSubFolder": true
            },
            {
              "name": "Case2: Valid Partner, Date range and invalid Site",
              "item": [
                {
                  "name": "Valid Partner, Date range and invalid Site",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Enrollments found between the date range \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")) + \" successfully\", function() {\r",
                          "    pm.expect(pm.response.text()).to.include(\"true\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"The returned enrollment requests created date is in between: \" + (pm.variables.get(\"fromDate\")) + \" and \" + (pm.variables.get(\"toDate\")), function() {\r",
                          "    var fromDate = new Date(pm.variables.get(\"fromDate\").split(\"T\")[0]);\r",
                          "    var toDate = new Date(pm.variables.get(\"toDate\").split(\"T\")[0]);\r",
                          "    var jsonResponce = JSON.parse(responseBody);\r",
                          "    var enrollmentRequestByPracticeNpis = jsonResponce.enrollmentRequestsByPracticeNpi;\r",
                          "    for (var j = 0; j < enrollmentRequestByPracticeNpis.length; j++) {\r",
                          "        var enrollmentRequestByPracticeNpi = enrollmentRequestByPracticeNpis[j];\r",
                          "        console.log((\"*******processing NPI: \" + enrollmentRequestByPracticeNpi.npi)+\"*******\");\r",
                          "\r",
                          "        for (var i = 0; i < enrollmentRequestByPracticeNpi.enrollmentRequests.length; i++) {\r",
                          "            var enrollmentRequest = enrollmentRequestByPracticeNpi.enrollmentRequests[i];\r",
                          "            console.log(\"*****prosessing ER: \" + enrollmentRequest.requestId);\r",
                          "            var createdTimeString = enrollmentRequest.createdTime;\r",
                          "            var createdTime = new Date(createdTimeString.split(\"T\")[0]);\r",
                          "\r",
                          "            pm.expect(createdTime >= fromDate).to.be.true;\r",
                          "            pm.expect(createdTime <= toDate).to.be.true;\r",
                          "        }\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ed2d9eae-f987-4ce4-b776-9a6abf8608cf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate}}/to/{{toDate}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Valid"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and Invalid date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"No Enrollments found between the date range \"+(pm.variables.get(\"fromDate3\"))+ \" and \"+(pm.variables.get(\"toDate3\")), function () {",
                          "    pm.expect(pm.response.text()).to.include(\"true\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d93bf277-5f4a-4fc1-8a21-4223481bf16b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate3}}/to/{{toDate3}}",
                    "description": "Partner= Valid; \nSite= Valid;\nDate range= Invalid(Date range not present in the application)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and Wrong date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"MadaketAPIDateFormatException\");",
                          "});",
                          "",
                          "pm.test(\"Provided date format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7ca536f7-54f6-4872-95c7-c3b7c796ae71",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/from/{{fromDate4}}/to/{{toDate4}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Wrong(wrong format of date range)"
                  },
                  "response": []
                },
                {
                  "name": "Valid Partner, Site and swaping date range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                        "exec": [
                          "pm.test(\"Status code is 412\", function () {",
                          "    pm.response.to.have.status(412);",
                          "});",
                          "",
                          "pm.test(\"DATE FORMAT INVALID\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"FromDate\");",
                          "});",
                          "",
                          "pm.test(\"Provided date range format is wrong\", function () {",
                          "    pm.expect(pm.response.text()).to.include(\"false\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b4bb82a2-21ba-4135-9380-ab4e54c8083b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "auth_id",
                        "type": "text",
                        "value": "{{auth_id_value}}"
                      },
                      {
                        "key": "auth_token",
                        "type": "text",
                        "value": "{{auth_token_value}}"
                      }
                    ],
                    "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}}/enrollments/from/{{toDate}}/to/{{fromDate}}",
                    "description": "Partner= Valid; \nSite= Valid; \nDate range= Swaping of date range(To Date first and From Date second)"
                  },
                  "response": []
                }
              ],
              "_postman_id": "3b6cf40d-3131-4895-b8b4-e514cbcd85f3",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "3ae7ddad-42c2-4eb6-a2f4-66fd3f329208",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "69d0f880-59f4-43ba-b3fa-002229db4e2d"
    },
    {
      "name": "POST Requests",
      "item": [
        {
          "name": "Generate Token",
          "item": [
            {
              "name": "Generate Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"apitoken copied successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "34a52ab8-7ba1-4b23-9017-84d7493d1558",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "apikey",
                      "value": "autopnckey1",
                      "type": "text"
                    },
                    {
                      "key": "apisecret",
                      "value": "autopnckey2",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{URL}}/api/authtoken",
                "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
              },
              "response": []
            }
          ],
          "_postman_id": "cf39c589-9bf5-49b9-9f47-c9bc5972ce31",
          "_postman_isSubFolder": true
        },
        {
          "name": "POST: Site enrollment status",
          "item": [
            {
              "name": "Enrollment statuses: Valid partner and Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5d4b3746-e5a6-4bf1-ab18-cb8e9658f4cf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status",
                "description": "Return the enrollment statuses for the valid partner as well as valid site"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: Valid partner and Site Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c031490c-43ff-4e08-aa86-8d4e38059a1a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Aetna\",\n  \"customPayerId\": \"TESTAET1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 20207,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}\n\n"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status",
                "description": "Return the enrollment statuses for the valid partner as well as valid site"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: valid partner and invalid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const expectedMessage = \"1 failure condition: URI parameter siteId does not match with siteId in JSON\";",
                      "const expectedReponseCode = 412;",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}",
                      "",
                      ""
                    ],
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b657d56e-7f7f-453d-9d8a-d5776a0cfb3d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"siteId\": \"PNCInvalidSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: invalid partner and valid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "const expectedMessage = \"1 failure condition: URI parameter partnerShortName does not match with partnerShortName in JSON\";",
                      "const expectedReponseCode = 412;",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"Response should have proper message for invalid site\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "46c13eb7-83f4-4ad1-a0d4-0bc3fa502483",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"TRIZETTO\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            },
            {
              "name": "Enrollment statuses: invalid partner and invalid site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3713c267-b09e-4651-896f-b91b88141eda",
                    "exec": [
                      "const expectedReponseCode = 412;",
                      "const expectedMessage = \"1 failure condition: URI parameter partnerShortName does not match with partnerShortName in JSON\";",
                      "",
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"Response should have proper message for invalid site\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode === expectedReponseCode){",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = (expectedReponseCode == responseCode);",
                      "    tests[\"Response message should be:  \" + expectedMessage] = (message == expectedMessage);",
                      "} else{",
                      "    tests[\"Response code should be:  \" + expectedReponseCode] = false;",
                      "    tests[\"Response message should be:  \" + expectedMessage] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "57cd5e37-32f4-4207-a31f-2f3d52d46bd5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"invalidPNC\",\n  \"siteId\": \"PNCInvalidSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/enrollments/status"
              },
              "response": []
            }
          ],
          "_postman_id": "09d11bae-0192-405c-92e9-5528f697602f",
          "_postman_isSubFolder": true
        },
        {
          "name": "POST: Partner enrollment statuses",
          "item": [
            {
              "name": "enrollment status for valid partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f011a21-6148-43df-83dd-0d0a5da98d20",
                    "exec": [
                      "pm.test(\"Response should be ok\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.have.jsonBody(\"success\");",
                      "    pm.response.to.have.jsonBody(\"enrollmentRequestsByPracticeNpi\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ea1c4b33-8377-403e-bfa9-03f0f5a5a6f8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"PNC\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/status",
                "description": "List enrollments of TRIZETTO partner"
              },
              "response": []
            },
            {
              "name": "Enrollment status for other partner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67de08ec-7d5c-4cdc-a41d-9ac24f28d592",
                    "exec": [
                      "pm.test(\"Response should contains an error\", function () {",
                      "    pm.response.to.have.status(412);",
                      "    pm.response.to.be.error;",
                      "    pm.response.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "pm.test(\"Response should have proper message\", function () {",
                      "     pm.expect(pm.response.text()).to.include(\"URI parameter partnerShortName does not match with partnerShortName in JSON\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "55f5846f-d4a4-4ee1-aa05-1d08f622a98e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"medicalGroupTIN\": 137000,\n  \"practiceLocationNPI\": 1073819710,\n  \"partnerAdminShortName\": \"TRIZETTO\",\n  \"siteId\": \"PNCSiteId\",\n  \"payerName\": \"Test Payer\",\n  \"customPayerId\": \"0TPNC1\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 18280,\n  \"modifiedFrom\": \"2019-06-15T12:00:00\",\n  \"modifiedTo\": \"2019-11-15T12:00:00\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"startIndex\": 0\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/status",
                "description": "Expecting test fail: listing enrollment status for other valid partner"
              },
              "response": []
            }
          ],
          "_postman_id": "2ed921fe-c35b-47aa-9d94-8317dddbc745",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "3a769003-1f0c-4ca8-9614-cc9fb6517a40"
    },
    {
      "name": "PUT Requests",
      "item": [
        {
          "name": "PUT: Partners site",
          "item": [
            {
              "name": "Partners site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1e57fb0-a221-44ef-9723-deade8c40267",
                    "exec": [
                      "const expectedReponseCode = 200;",
                      "const putVerificationTokenMessage = \"1 failure condition:  Put verification token not found in header\";",
                      "var isFailedDueToPutVerificationToken = false;",
                      "",
                      "pm.test(\"Response should contains success\", function () {",
                      "    pm.response.to.have.status(expectedReponseCode);",
                      "    pm.response.to.be.error;",
                      "    pm.response.not.to.have.jsonBody(\"error\");",
                      "});",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var responseCode = jsonData.error.httpReturnCode;",
                      "var message = jsonData.error.message;",
                      "",
                      "if(responseCode == 404 && message == putVerificationTokenMessage){",
                      "    tests[\"Failed because of missing put verification token\"] = false;",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e7971a12-a2b3-4ce0-9b19-ca4eef7da6ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"PNC Test Site\",\n  \"siteId\": \"PNCSiteId\"\n}"
                },
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}"
              },
              "response": []
            }
          ],
          "_postman_id": "90c8bc89-293f-498f-823f-ba2c1cfe1f31",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "3e40ca66-d11c-44b0-8de2-1393fddb0cbf"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "65741959-64b0-4d23-b71d-0ec31ed116fa",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "da0e49dd-2179-47eb-a4ae-895c6b2cfbf3",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "e6481c4d-408b-4116-b8b7-676aedd99075",
      "key": "npi",
      "value": "1649240540",
      "type": "string"
    },
    {
      "id": "b3e6c97d-2d96-4c59-9e77-d7d22f2f73e7",
      "key": "npi1",
      "value": "1073819710",
      "type": "string"
    },
    {
      "id": "3cdf99ed-888e-4600-a6e2-35a33aee2be3",
      "key": "npi2",
      "value": "1063828648",
      "type": "string"
    },
    {
      "id": "754604b4-fe0c-46f2-976d-b50815731332",
      "key": "npi3",
      "value": "4319737249",
      "type": "string"
    },
    {
      "id": "d3bde2bb-2ca5-419d-a9be-98fc4a32a4f3",
      "key": "npi4",
      "value": "bnmeufku8",
      "type": "string"
    },
    {
      "id": "bfdc6506-84c3-4370-89be-db26df2176d5",
      "key": "npi5",
      "value": "1518016351",
      "type": "string"
    },
    {
      "id": "17636dcd-e9bf-479e-b704-a3cb8dbbd0d0",
      "key": "npi6",
      "value": "1114903994",
      "type": "string"
    },
    {
      "id": "802e7745-74aa-4cc8-910f-9a80fc726bfc",
      "key": "npi7",
      "value": "1376655704",
      "type": "string"
    },
    {
      "id": "8380828a-d516-4201-821d-8bb80961b635",
      "key": "npi8",
      "value": "1975429873",
      "type": "string"
    },
    {
      "id": "fd4960ba-3e9c-4f95-8f08-83c295c0e668",
      "key": "npi9",
      "value": "wft51234u",
      "type": "string"
    },
    {
      "id": "3dbb82dc-dc8d-47df-95de-d5edd4748866",
      "key": "partnerShortName",
      "value": "PNC",
      "type": "string"
    },
    {
      "id": "281c7db5-8296-4d95-8b09-6ec073fc9a8f",
      "key": "partnerShortName2",
      "value": "TRIZETTO",
      "type": "string"
    },
    {
      "id": "232a01a5-88a4-48ff-b0cc-e85d637d0232",
      "key": "partnerShortName3",
      "value": "TESTPARTNER",
      "type": "string"
    },
    {
      "id": "6264ebea-874c-4281-b25d-02ae3bb009bc",
      "key": "siteId",
      "value": "PNCSiteId",
      "type": "string"
    },
    {
      "id": "06b8f43f-cf5c-4642-a797-7868959b5ab0",
      "key": "siteId1",
      "value": "jaredpnc",
      "type": "string"
    },
    {
      "id": "5ea4b601-26ff-4fa7-bb52-872be3e3400c",
      "key": "siteId2",
      "value": "api13id",
      "type": "string"
    },
    {
      "id": "ada5417c-426c-4459-8986-841c0f314634",
      "key": "siteId3",
      "value": "1234abcd",
      "type": "string"
    },
    {
      "id": "7d4ea270-1fd0-45be-aced-f10de78273c4",
      "key": "siteId4",
      "value": "fsdf asfas sadfasd",
      "type": "string"
    },
    {
      "id": "ddbf4ed8-0cd8-44da-9e67-76f43b8e7206",
      "key": "fromDate",
      "value": "2019-06-01T00:00:00",
      "type": "string"
    },
    {
      "id": "bc19597c-1159-4ed3-9727-0de98c1657d1",
      "key": "fromDate3",
      "value": "1987-06-01T00:00:00",
      "type": "string"
    },
    {
      "id": "06c57358-2f39-4c0c-b0f3-8831c3ac35e3",
      "key": "fromDate4",
      "value": "3563536354",
      "type": "string"
    },
    {
      "id": "8b2a4f56-9a85-4e82-b485-37fdf7bedc72",
      "key": "toDate",
      "value": "2019-06-30T00:00:00",
      "type": "string"
    },
    {
      "id": "793df4fc-740b-4a7d-b92d-f9533c72d5ee",
      "key": "toDate3",
      "value": "1987-06-30T00:00:00",
      "type": "string"
    },
    {
      "id": "f84c0cbf-b122-43d1-8f05-bab5f0b1c0d1",
      "key": "toDate4",
      "value": "99847334",
      "type": "string"
    }
  ]
}