{
  "info": {
    "_postman_id": "3d6105d8-7265-48a1-8bb0-c28cc00b56f1",
    "name": "API2.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Generate Token",
      "item": [
        {
          "name": "Generate Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42dade5c-6028-4d3a-89db-709c677ac81c",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"auth_token_value\", jsonData.apitoken);",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"apitoken copied successfully\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"apitoken\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c07411c8-99d0-424f-9c2a-d686d86deba0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "apikey",
                  "value": "autopnckey1",
                  "type": "text"
                },
                {
                  "key": "apisecret",
                  "value": "autopnckey2",
                  "type": "text"
                }
              ]
            },
            "url": "{{URL}}/api/authtoken",
            "description": "This request is used to generate Auth_Token and copy the token to the environment variable."
          },
          "response": []
        }
      ],
      "_postman_id": "96b148dd-b314-4156-b362-794c74fcafbc"
    },
    {
      "name": "TEST- NPI Type Verification",
      "item": [
        {
          "name": "Type-2 NPI",
          "item": [
            {
              "name": "Valid Type-2 NPI",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi\"))+\" is a Type TWO NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3031f657-3e4d-469a-93ea-2852bd0448fd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi}}",
                "description": "NPI(Type 2)= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Type-2 NPI: Present in application(same partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi1\"))+\" is a Type TWO NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ef09837d-be4d-4833-b9bd-46d251457020",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi1}}",
                "description": "NPI(Type 2)= Invalid (present in the application with same partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Type-2 NPI: Present in application(different partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi2\"))+\" is a Type TWO NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"TWO\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1c8181b6-be92-4f1c-a0a6-309fed1cd136",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi2}}",
                "description": "NPI(Type 2)= Invalid (present in the application with different partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Type-2 NPI: Not present in application and NPPS registry",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi3\"))+\" is a UNKNOWN Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "445eebe5-a0d7-4e72-88f1-161c2a2575ff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi3}}",
                "description": "NPI(Type 2)= Invalid (Not present in the application and NPPS registry)"
              },
              "response": []
            },
            {
              "name": "Invalid Type- 2 NPI",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi4\"))+\" is a UNKNOWN Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "846bfdc9-000e-442c-9afa-33bf6d7f0a9c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi4}}",
                "description": "NPI Type 2= Invalid"
              },
              "response": []
            }
          ],
          "_postman_id": "e5925d37-4d56-4343-8f5e-b9764f4ce951",
          "_postman_isSubFolder": true
        },
        {
          "name": "Type-1 NPI",
          "item": [
            {
              "name": "Valid Type-1 NPI",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi5\"))+\" is a Type ONE NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "979cb380-dc65-4b5e-a393-0830d658b1ab",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "value": "{{auth_id_value}}",
                    "type": "text"
                  },
                  {
                    "key": "auth_token",
                    "value": "{{auth_token_value}}",
                    "type": "text"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi5}}",
                "description": "NPI(Type 1)= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Type-1 NPI: Present in application(same partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi6\"))+\" is a ONE Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7a5599ae-86b2-4695-998a-25f5b12ca426",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi6}}",
                "description": "NPI(Type 1)= Invalid (present in the application with same partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Type-1 NPI: Present in application(different partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi7\"))+\" is a ONE Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"ONE\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7e1ec376-8215-43e9-b5cf-8f31160c3ab4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi7}}",
                "description": "NPI(Type 1)= Invalid (present in the application with different partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Type-1 NPI: Not present in application and NPPS registry",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi8\"))+\" is a UNKNOWN Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "171d58e2-f432-40cc-b059-64d5065010bf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi8}}",
                "description": "NPI(Type 1)= Invalid (Not present in the application and NPPS registry)"
              },
              "response": []
            },
            {
              "name": "Invalid Type- 1 NPI",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c18747e-5037-42d4-86fa-d737b7e49fe0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"The given NPI \"+(pm.variables.get(\"npi9\"))+\" is a UNKNOWN Type NPI\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"UNKNOWN\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c8d60534-eaa1-4e9e-9a06-ed0ef3a98896",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/npitype/{{npi9}}",
                "description": "NPI= Invalid"
              },
              "response": []
            }
          ],
          "_postman_id": "8459bab7-a0a0-401e-83a2-f844759826f2",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "d28d5491-298c-49e4-87e2-9af6860d8edf"
    },
    {
      "name": "TEST: Partner specific plans",
      "item": [
        {
          "name": "Valid Partner",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Plan Id is present\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"planId\");",
                  "});",
                  "",
                  "pm.test(\"Legacy Label is present\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                  "});",
                  "",
                  "pm.test(\"Plan Type is present\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"type\");",
                  "});",
                  "",
                  "pm.test(\"Unique Plan Id is present\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "051f52f7-c851-4dfb-8637-ead105125cc1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "auth_id",
                "value": "{{auth_id_value}}",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "{{auth_token_value}}",
                "type": "text"
              }
            ],
            "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/plans",
            "description": "Partner= Valid"
          },
          "response": []
        },
        {
          "name": "Invalid Partner (Different Partner)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                  "});",
                  "",
                  "pm.test(\"Partner not found\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"false\");",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "897319fa-0a66-4e22-a8d8-789d97efae45",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "auth_id",
                "type": "text",
                "value": "{{auth_id_value}}"
              },
              {
                "key": "auth_token",
                "type": "text",
                "value": "{{auth_token_value}}"
              }
            ],
            "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/plans",
            "description": "Partner= Invalid (Different Partner)"
          },
          "response": []
        },
        {
          "name": "Invalid Partner (Not exist)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfe06a5a-7cda-4501-98d7-48edc59771bc",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"PARTNER MISSING: Partner not found.\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                  "});",
                  "",
                  "pm.test(\"Partner not found\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"false\");",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "e37bcfa3-8f32-4e83-8a7e-05cf5f421d48",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "auth_id",
                "type": "text",
                "value": "{{auth_id_value}}"
              },
              {
                "key": "auth_token",
                "type": "text",
                "value": "{{auth_token_value}}"
              }
            ],
            "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/plans",
            "description": "Partner= Invalid (Not present in the application)"
          },
          "response": []
        }
      ],
      "_postman_id": "8068d472-dfad-41d3-83d3-8d928ecc673f"
    },
    {
      "name": "TEST: Partner and Site specific plans",
      "item": [
        {
          "name": "Case1: Valid Partner and different Site combinations",
          "item": [
            {
              "name": "Valid Partner and Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"planId\");",
                      "});",
                      "",
                      "pm.test(\"Legacy Label is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                      "});",
                      "",
                      "pm.test(\"Plan Type is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"type\");",
                      "});",
                      "",
                      "pm.test(\"Unique Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8b7d92a7-64f3-48f9-b1fe-719a38280d90",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}/plans",
                "description": "Partner= Valid; \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"planId\");",
                      "});",
                      "",
                      "pm.test(\"Legacy Label is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"legacyLabel\");",
                      "});",
                      "",
                      "pm.test(\"Plan Type is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"type\");",
                      "});",
                      "",
                      "pm.test(\"Unique Plan Id is present\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"uniquePlanId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "30c9b2e7-bad5-43b0-ae80-dbf45f2d1854",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}/plans",
                "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4d6fe0e0-5f43-4580-8cd3-e4073cfbe207",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}/plans",
                "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "44722caf-2cb2-48ef-a0ad-9c2716918bc5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}/plans",
                "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c117dce8-c519-4ead-b313-7446923dec16",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}/plans",
                "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "13e422b3-b46a-4341-af06-37b37186725d",
          "_postman_isSubFolder": true
        },
        {
          "name": "Case2: Different Partner and different Site combinations",
          "item": [
            {
              "name": "Invalid Partner and valid Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0ca713ff-42f8-4f66-9527-8ff9de569986",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}/plans",
                "description": "Partner= Invalid (Different Partner); \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4ce36b1b-e12f-4bcc-8fad-bb4f5c0bbf42",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}/plans",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1007b2fe-22c5-4d10-a7a7-42d2268788b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}/plans",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "73ab2795-f764-4fcf-a3bd-759806d2f390",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}/plans",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "801bcdbc-8a65-4f84-91e4-227358c9705f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}/plans",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "867db231-8560-4381-821b-7581e2a43949",
          "_postman_isSubFolder": true
        },
        {
          "name": "Case3: Wrong Partner and different Site combinations",
          "item": [
            {
              "name": "Invalid Partner(Not present) and Valid Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a9d56359-236c-4114-84e0-665ea69ce8ca",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}/plans",
                "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9ca9d701-c1fc-46a0-9bdf-6f61b6c4b713",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}/plans",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e2494e8b-963e-4d78-afa8-fa431b77f838",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}/plans",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a8109515-1f2e-4c83-a2d0-271a3a516667",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e2aa3871-6c37-4151-8cb9-a586a7f448c8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}/plans",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "976e9cd5-23ad-4375-a4fb-75a003b31cb4",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "03099bbe-18d2-41e3-b691-ae7839fe7b35"
    },
    {
      "name": "TEST: Partner specific Sites",
      "item": [
        {
          "name": "Case1: Valid Partner and different Site combinations",
          "item": [
            {
              "name": "Valid Partner and Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Site \"+(pm.variables.get(\"siteId\"))+\" found successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"true\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5d75fe90-cf9a-4361-aea1-38a6c357aa86",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId}}",
                "description": "Partner= Valid; \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Different Site, Same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Site \"+(pm.variables.get(\"siteId1\"))+\" found successfully\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"true\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dc1035fb-0096-4929-b9c7-96aa8877fccd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId1}}",
                "description": "Partner= Valid; \nSite= Invalid (Different Site, Same Partner)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "858b0f89-e006-4ed3-b5d2-af1e87134148",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId2}}",
                "description": "Partner= Valid; \nSite= Invalid (Different Partner)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5759768f-2d75-40d1-a894-0ccaee7f2628",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId3}}",
                "description": "Partner= Valid; \nSite= Invalid (Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Valid Partner and Invalid Site (Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Site not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"SITE MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Site not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dfdc0fc7-1ac0-4459-b603-5b33a75b23f6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/sites/{{siteId4}}",
                "description": "Partner= Valid; \nSite= Invalid (Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "3a0189c3-183d-461a-a0f0-b4112c7f4890",
          "_postman_isSubFolder": true
        },
        {
          "name": "Case2: Different Partner and different Site combinations",
          "item": [
            {
              "name": "Invalid Partner and valid Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d8327e25-7fa9-4d9c-86f2-e022e6ee9357",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId}}",
                "description": "Partner= Invalid (Different Partner); \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Different Site, same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1b6830d1-52e7-482e-8b2a-b41d7ad0dbdf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId1}}",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Site, same Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ee30456c-30a5-4d4d-812b-4c365f162cb1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId2}}",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Different Partner's Site)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "18ad8c7c-85cf-4797-b07f-2c74f7c1530e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId3}}",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner and invalid Site(Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0a4544ad-079d-4a10-9884-f92b31ce0bbe",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName2}}/sites/{{siteId4}}",
                "description": "Partner= Invalid (Different Partner); \nSite= Invalid(Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "a5c81c44-c712-4c8c-9fb5-77480404915b",
          "_postman_isSubFolder": true
        },
        {
          "name": "Case3: Wrong Partner and different Site combinations",
          "item": [
            {
              "name": "Invalid Partner(Not present) and Valid Site",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5126c06e-a50c-4241-9444-6cf6a8368471",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId}}",
                "description": "Partner= Invalid(Not present in the application); \nSite= Valid"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Different Site, Same Partner)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3f47165b-2f3d-4839-b859-a88a27cbb446",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId1}}",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Site, same Partner)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Different Partner's Site)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2c74ede9-db6e-48bf-af5f-e63a5c9653df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId2}}",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Different Partner's Site)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Not present in the application)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f1519b24-c018-4237-b42d-647376363f56",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Not present in the application)"
              },
              "response": []
            },
            {
              "name": "Invalid Partner(Not present) and Invalid Site(Wrong Site Id)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3fbe8cd-3c9f-4abb-afec-f4d84c4fd0bd",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Partner not found\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"false\");",
                      "});",
                      "pm.test(\"PARTNER MISSING: Invalid Site ID.\", function () {",
                      "    pm.expect(pm.response.text()).to.include(\"Partner not found\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e4af635b-fbed-438d-99c7-f38b2112813f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "auth_id",
                    "type": "text",
                    "value": "{{auth_id_value}}"
                  },
                  {
                    "key": "auth_token",
                    "type": "text",
                    "value": "{{auth_token_value}}"
                  }
                ],
                "url": "{{URL}}/api/v2.0/partners/{{partnerShortName3}}/sites/{{siteId3}}",
                "description": "Partner= Invalid(Not present in the application); \nSite= Invalid(Wrong Site Id)"
              },
              "response": []
            }
          ],
          "_postman_id": "67d1c284-66a4-47f5-9243-de7084558f74",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "948fddfd-47ed-4dec-8213-654869236f53"
    },
    {
      "name": "POST: Partner enrollment statuses",
      "item": [
        {
          "name": "List enrollment statuses for valid partner",
          "_postman_id": "ea1c4b33-8377-403e-bfa9-03f0f5a5a6f8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "auth_id",
                "value": "{{auth_id_value}}",
                "type": "text"
              },
              {
                "key": "auth_token",
                "value": "{{auth_token_value}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"createdFrom\": \"2009-06-15T13:45:30\",\n  \"createdTo\": \"2009-06-15T13:45:30\",\n  \"customPayerId\": \"PLAN123\",\n  \"enrollmentRequestId\": 960771,\n  \"enrollmentUnit\": \"GROUP\",\n  \"individualNPI\": 1518016351,\n  \"medicalGroupTIN\": 000137000,\n  \"modifiedFrom\": \"2009-06-15T13:45:30\",\n  \"modifiedTo\": \"2009-06-15T13:45:30\",\n  \"ownerString\": \"shirish@madakethealth.com\",\n  \"pageNumber\": 0,\n  \"pageSize\": 25,\n  \"partnerAdminShortName\": \"PNC\",\n  \"payerName\": \"Test Payer\",\n  \"planType\": \"INSTITUTIONAL\",\n  \"practiceLocationNPI\": 1073819710,\n  \"resolutionState\": \"APPROVED\",\n  \"siteId\": \"PNCSiteId\",\n  \"startIndex\": 0,\n  \"status\": \"PENDING\",\n  \"targetCompletionDate\": \"2009-06-15\",\n  \"transactionTypes\": [\n    \"CSI\"\n  ],\n  \"workflowId\": 12345\n}"
            },
            "url": "{{URL}}/api/v2.0/partners/{{partnerShortName}}/enrollments/status",
            "description": "List enrollments of TRIZETTO partner"
          },
          "response": []
        }
      ],
      "_postman_id": "2ed921fe-c35b-47aa-9d94-8317dddbc745"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "65741959-64b0-4d23-b71d-0ec31ed116fa",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "da0e49dd-2179-47eb-a4ae-895c6b2cfbf3",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "a7f8aa80-526a-40fa-aee8-da630a4775c4",
      "key": "npi",
      "value": "1649240540",
      "type": "string"
    },
    {
      "id": "5aa41dfa-9840-43c5-916d-497d49b794c5",
      "key": "npi1",
      "value": "1073819710",
      "type": "string"
    },
    {
      "id": "693d8e1e-4fc9-4368-990a-32837b91f291",
      "key": "npi2",
      "value": "1063828648",
      "type": "string"
    },
    {
      "id": "d7c1fadd-1045-475c-bae6-6a3963d5b522",
      "key": "npi3",
      "value": "4319737249",
      "type": "string"
    },
    {
      "id": "2dd9f9eb-b27e-4d89-a710-82fd9349b371",
      "key": "npi4",
      "value": "bnmeufku8",
      "type": "string"
    },
    {
      "id": "55f47450-8083-4cae-b591-f401050f68a4",
      "key": "npi5",
      "value": "1518016351",
      "type": "string"
    },
    {
      "id": "45911ed1-d50a-4bc4-8855-ba9f8150ad4a",
      "key": "npi6",
      "value": "1114903994",
      "type": "string"
    },
    {
      "id": "0f187e34-6770-43ed-8a89-e09ade981a87",
      "key": "npi7",
      "value": "1376655704",
      "type": "string"
    },
    {
      "id": "e5bb6937-9db1-4c68-b643-7e09eb692197",
      "key": "npi8",
      "value": "1975429873",
      "type": "string"
    },
    {
      "id": "963aac6f-bb25-4617-8985-ca73e3af8722",
      "key": "npi9",
      "value": "wft51234u",
      "type": "string"
    },
    {
      "id": "124ff2b6-cdd0-4d92-8fa6-be8186727a17",
      "key": "partnerShortName",
      "value": "PNC",
      "type": "string"
    },
    {
      "id": "4d426845-0038-4c94-9e09-334ecff8ff78",
      "key": "partnerShortName2",
      "value": "TRIZETTO",
      "type": "string"
    },
    {
      "id": "9e890625-e459-4bd6-9e07-c315e62cd9f1",
      "key": "partnerShortName3",
      "value": "TESTPARTNER",
      "type": "string"
    },
    {
      "id": "da85b5ec-eb5b-4f0e-be32-3a8f5e7c0341",
      "key": "siteId",
      "value": "PNCSiteId",
      "type": "string"
    },
    {
      "id": "d52273c4-37d9-4b65-b0cc-8b03e31fa030",
      "key": "siteId1",
      "value": "jaredpnc",
      "type": "string"
    },
    {
      "id": "b76b62b4-87c1-4130-bde2-d22c710e9a1d",
      "key": "siteId2",
      "value": "api13id",
      "type": "string"
    },
    {
      "id": "076abbff-a4f4-4347-aec5-63207543d839",
      "key": "siteId3",
      "value": "1234abcd",
      "type": "string"
    },
    {
      "id": "29614eb0-5f62-446f-8b36-2c961d11fe16",
      "key": "siteId4",
      "value": "fsdf asfas sadfasd",
      "type": "string"
    }
  ]
}